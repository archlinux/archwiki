# Examples/test cases for en / en-x-piglatin conversion.
# Run from this directory with:
#   foma -l en-examples.foma
echo EXPECT 9

source en.foma

regex CONVERT'EN'X'PIGLATIN;
echo EXPECT: 1 (1 = TRUE, 0 = FALSE)
test functional
echo EXPECT: 123 Igpenpay igpay atinlay ofway 123 on'tday opstay elievingbay inway ourselfyay eenquay JavaScript NASA
down 123 Pigpen pig latin of 123 don't stop believing in yourself queen JavaScript NASA
regex CONVERT'EN;
echo EXPECT: 1 (1 = TRUE, 0 = FALSE)
test functional
echo EXPECT: 123 Pigpen pig latin of 123 don't tops believing in yourself queen avaScriptJay ASANAY
down 123 Igpenpay igpay atinlay ofway 123 on'tday opstay elievingbay inway ourselfyay eenquay avaScriptJay ASANAY

# For pig latin, 'longest safe' strings make more sense than 'shortest unsafe'
# strings, since every string is unsafe until it has the trailing 'ay'
regex LONGSAFEWORD(CONVERT'EN'X'PIGLATIN .o. CONVERT'EN, BREAK);
echo EXPECT: hello my name is [[slim shady]]. no [[way]]!
down hello my name is slim shady. no way!

regex LONGSAFEWORD(CONVERT'EN .o. CONVERT'EN'X'PIGLATIN, BREAK);
echo EXPECT: 123 Igpenpay igpay atinlay ofway 123 on'tday opstay elievingbay inway ourselfyay eenquay avaScriptJay ASANAY [[way wayay]]
down 123 Igpenpay igpay atinlay ofway 123 on'tday opstay elievingbay inway ourselfyay eenquay avaScriptJay ASANAY way wayay

regex CONVERT'EN;
echo EXPECT: my name
down ymay amenay
regex CONVERT'EN'X'PIGLATIN.i;
echo EXPECT: my name
down ymay amenay
regex CPIG1;
echo EXPECT: my
down ymay
