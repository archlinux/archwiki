# FOMA script for en and en-x-piglatin conversions
# Generates .att files when run from this directory using:
#   foma -f en.foma
# Then generate executable .pfst files with:
#   ../tools/build-langconv-fst.js -l en en-x-piglatin
#   ../tools/build-langconv-fst.js -l en-x-piglatin en
echo EXPECT 12

define DOWNCASE [
  {A}->{a},,{B}->{b},,{C}->{c},,{D}->{d},,{E}->{e},,{F}->{f},,{G}->{g},,
  {H}->{h},,{I}->{i},,{J}->{j},,{K}->{k},,{L}->{l},,{M}->{m},,{N}->{n},,
  {O}->{o},,{P}->{p},,{Q}->{q},,{R}->{r},,{S}->{s},,{T}->{t},,{U}->{u},,
  {V}->{v},,{W}->{w},,{X}->{x},,{Y}->{y},,{Z}->{z}
];

define UPCASE [
  {a}->{A},,{b}->{B},,{c}->{C},,{d}->{D},,{e}->{E},,{f}->{F},,{g}->{G},,
  {h}->{H},,{i}->{I},,{j}->{J},,{k}->{K},,{l}->{L},,{m}->{M},,{n}->{N},,
  {o}->{O},,{p}->{P},,{q}->{Q},,{r}->{R},,{s}->{S},,{t}->{T},,{u}->{U},,
  {v}->{V},,{w}->{W},,{x}->{X},,{y}->{Y},,{z}->{Z}
];

source brackets.foma
# Use the extra "<<" token from brackets.foma for our "initial" token.
define INITIAL'TOKEN "<<";

# Source this early in order to ensure IDENTITY is defined.
source safety.foma

define LETTER [a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z];
define PHPAZaz [LETTER | [LETTER .o. UPCASE].l | {'} ];
define BREAK \[PHPAZaz | BRACKETS];

define VOWEL [a|e|i|o|u];

define VOWELY VOWEL | {y};

define MAKELOWERCASE(words) [words .o. DOWNCASE].l;
define MAKEUPPERCASE(words) [words .o. UPCASE].l;
define MAKECAPCASE(words) [words .o. [?.o.UPCASE] -> || .#. _ ].l;

define ONLYLOWERCASE(words) words & MAKELOWERCASE(PHPAZaz)+;
define ONLYUPPERCASE(words) words & MAKEUPPERCASE(PHPAZaz)+;
define ONLYCAPCASE(words) words & [MAKEUPPERCASE(PHPAZaz) MAKELOWERCASE(PHPAZaz)+];

# ICC = Initial Consonant Cluster
# all (un)reasonable initial consonant clusters from american-english-insane;
# orders of magnitude smaller than CONSONANTS^<4 !
define INSANEICC [
  {b}|{b'h}|{b's}|{bb}|{bbl's}|{bbls}|{bbs}|{bbs's}|{bc}|{bcb}|{bcb's}|{bcd}|
  {bcf}|{bch}|{bchs}|{bcrcn}|{bd}|{bdl}|{bdls}|{bfl}|{bfnd}|{bfrg}|{bfrg's}|
  {bg}|{bglr}|{bglr's}|{bh}|{bhd}|{bj}|{bjn}|{bk}|{bk's}|{bkbndr}|{bkgd}|
  {bklr}|{bkpr}|{bkt}|{bl}|{blch}|{bld}|{bldr}|{blfch}|{blks}|{blr}|{bls}|
  {blt}|{blvd}|{bm}|{bm's}|{bmr}|{bn}|{bnf}|{bns}|{bp}|{bpm}|{bpm's}|{bps's}|
  {br}|{br'}|{br's}|{brfnn}|{brfnn's}|{brfnnh}|{brfsch}|{brl}|{brn}|{brr}|
  {brrr}|{brz}|{bs}|{bsf}|{bskt}|{bt}|{bts}|{bv}|{bvd's}|{bvt}|{bw}|{bwr}|
  {bz}|{bz's}|{c}|{c's}|{cb}|{cbc}|{cc}|{cc's}|{ccd}|{cch}|{cckw}|{ccm}|
  {ccrd}|{ccw}|{ccws}|{cd}|{cd's}|{cdf}|{cdg}|{cdn}|{cdr}|{cf}|{cf's}|{cfc}|
  {cfd}|{cfh}|{cfm}|{cfs}|{cgm}|{cgs}|{cgs's}|{ch}|{ch'}|{chh}|{chhn}|{chk}|
  {chkf}|{chl}|{chm}|{chn}|{chr}|{cht}|{chth}|{chw}|{ckw}|{cl}|{cl's}|{clk}|
  {cllr}|{clw}|{cm}|{cm's}|{cmd}|{cmdr}|{cn}|{cns}|{cp}|{cpl}|{cpm}|{cpr}|
  {cps's}|{cpt}|{cr}|{cr's}|{crc}|{crch}|{crfg}|{crl}|{crp}|{crs}|{crt}|{crts}|
  {crwd}|{crwth}|{crwth's}|{crwths}|{crz}|{cs}|{csc}|{csch}|{csk}|{csmp}|{csn}|
  {csp}|{cst}|{csw}|{ct}|{ctf}|{ctg}|{cth}|{cthr}|{ctrl}|{cv}|{cw}|{cwm}|
  {cwm's}|{cwmbr}|{cwms}|{cwr}|{cwt's}|{cz}|{czst}|{d}|{d'}|{d's}|{db}|{db's}|
  {dbms}|{dbr}|{dbrn}|{dc}|{dcb}|{dcbn}|{dcl}|{dd}|{ddn}|{dds}|{ddt}|{df}|
  {dfn}|{dfr}|{dfs}|{dfss}|{dft}|{dg}|{dg's}|{dgh}|{dh}|{dhl}|{dhr}|{dj}|
  {dj's}|{dkg}|{dkg's}|{dkl}|{dkl's}|{dkm}|{dkm's}|{dks}|{dl}|{dl's}|{dm}|
  {dm's}|{dmd}|{dn}|{dp}|{dph}|{dr}|{drch}|{ds}|{dsch}|{dsn}|{dsr}|{dt}|
  {dt's}|{dtd}|{dts}|{dv}|{dw}|{dx}|{dz}|{dzh}|{f}|{f's}|{fb}|{fc}|{fch}|
  {fcp}|{fcs}|{fct}|{fd}|{fdn}|{fdr}|{fdt}|{ff}|{ffhr}|{ffnfk}|{ffrth}|
  {ffrth's}|{fg}|{fgn}|{fgr}|{fh}|{fhlmc}|{fhr}|{fj}|{fl}|{flb}|{flch}|
  {fldxt}|{flfg}|{fll}|{fln}|{flr}|{flss}|{flss's}|{fm}|{fm's}|{fmt}|{fn}|
  {fnm}|{fpl}|{fpm}|{fpsps}|{fr}|{fr's}|{frd}|{frg}|{frl}|{frs}|{frst}|
  {frst's}|{fs}|{fsb}|{fsh}|{fst}|{ft}|{ft's}|{fthm}|{fthm's}|{ftn}|{ftncmd}|
  {ftp's}|{fw}|{fz}|{g}|{g'd}|{g's}|{gb}|{gb's}|{gc}|{gc's}|{gcd}|{gcg}|
  {gcg's}|{gd}|{gd's}|{gdp}|{gf}|{gfnz}|{gfnz's}|{ggr}|{gh}|{ghb}|{ghr}|{ghz}|
  {gj}|{gk}|{gl}|{gl's}|{glb}|{gld}|{gld's}|{glhw}|{gm}|{gm's}|{gmc}|{gmt}|
  {gn}|{gnn}|{gnp}|{gp}|{gpcd}|{gpd}|{gph}|{gpm}|{gps}|{gpss}|{gr}|{grf}|
  {grfn}|{grn}|{grr}|{grs}|{grx}|{gs}|{gsch}|{gt}|{gtc}|{gth}|{gtt}|{gw}|
  {gw's}|{gz}|{gzh}|{h}|{h'm}|{h's}|{hb}|{hc}|{hcb}|{hcl}|{hd}|{hdkf}|{hdl}|
  {hdlc}|{hdr}|{hdr's}|{hf}|{hf's}|{hfg}|{hfth}|{hg}|{hg's}|{hgrn}|{hhd}|{hj}|
  {hl}|{hl's}|{hld}|{hm}|{hm's}|{hmm}|{hn}|{hp}|{hp's}|{hr}|{hr's}|{hrdl}|
  {hrdwr}|{hrv}|{hrzn}|{hs}|{ht}|{html}|{hts}|{http}|{hv}|{hw}|{hwt}|{hz}|
  {hz's}|{j}|{j'}|{j's}|{jb}|{jc}|{jcl}|{jd}|{jfng}|{jg}|{jh}|{jhvh}|{jkp}|
  {jl}|{jl's}|{jms}|{jn}|{jnr}|{jnt}|{jpn}|{jr}|{jr's}|{js}|{jt}|{jw}|{k}|
  {k'r}|{k's}|{kb}|{kb's}|{kbps}|{kc}|{kc's}|{kd}|{kfmm}|{kfrsch}|{kg}|{kg's}|
  {kgf}|{kgr}|{kh}|{khl}|{khm}|{khn}|{khr}|{khv}|{khw}|{khz}|{kj}|{kk}|{kkk}|
  {kl}|{klb}|{klj}|{kln}|{klngsl}|{klv}|{km}|{km's}|{kmm}|{kn}|{kngw}|{knt}|
  {kp}|{kpc}|{kph}|{kph's}|{kr}|{kr's}|{krn}|{krs}|{krt}|{ks}|{ksh}|{kt}|{kth}|
  {kv}|{kw}|{kwhr}|{l}|{l'}|{l'ch}|{l's}|{l'tr}|{l'v}|{lb}|{lb's}|{lc}|{lcm's}|
  {lcs}|{ld}|{ldg}|{ldl}|{ldp}|{ldp's}|{lfb}|{lfbk}|{lfd}|{lg}|{lh}|{lhb}|{lj}|
  {ll}|{llb}|{lld}|{llm}|{lm}|{lm's}|{ln}|{lndg}|{lnr}|{lp}|{lpm}|{lpn}|{lr}|
  {ls}|{lsc}|{lsd}|{lst}|{lt}|{ltd}|{ltm}|{ltr}|{ltz}|{lv}|{lw}|{lw's}|{lwm}|
  {lwp}|{lx}|{lx's}|{lxx}|{lxxx}|{lz}|{m}|{m's}|{mb}|{mb's}|{mbd}|{mbm}|
  {mbm's}|{mbps}|{mc}|{mc's}|{mcc}|{mcd}|{mcf}|{mcf's}|{mcfd}|{mcfd's}|{mcg}|
  {mcg's}|{mch}|{mck}|{mcph}|{md}|{md's}|{mdll}|{mdm}|{mdm's}|{mdms}|{mdnt}|
  {mf}|{mfl}|{mflh}|{mfnch}|{mfnch's}|{mfnchh}|{mg}|{mg's}|{mgd}|{mgr}|{mgt}|
  {mh}|{mhg}|{mhz}|{mj}|{mk}|{mks}|{mktg}|{ml}|{ml's}|{mll}|{mlll}|{mls}|{mlx}|
  {mm}|{mm's}|{mmfd}|{mmmm}|{mn}|{mn's}|{mngr}|{mngr's}|{mp}|{mpb}|{mpbs}|
  {mph's}|{mphps}|{mpr}|{mr}|{mr's}|{mrch}|{mrd}|{mrn}|{mrs}|{ms}|{msb}|{msgr}|
  {msh}|{mss}|{mst}|{mt}|{mtb}|{mtd}|{mts}|{mtscmd}|{mtw}|{mtx}|{mv}|{mv's}|
  {mvp}|{mw}|{mw's}|{mx}|{mx's}|{mxd}|{mz}|{n}|{n'}|{n'dj}|{n'g}|{n's}|{n't}|
  {nb}|{nb's}|{nbg}|{nbw}|{nc}|{nd}|{nd's}|{ndj}|{ndr}|{ng}|{ng's}|{ngb}|{ngw}|
  {nh}|{nj}|{nk}|{nkk}|{nkr}|{nn}|{nnw}|{np}|{np's}|{npfx}|{npt}|{npt's}|{nr}|
  {ns}|{nt}|{nt's}|{nth}|{nv}|{nw}|{nwbn}|{nwbw}|{p}|{p's}|{pb}|{pb's}|{pbs}|
  {pbx}|{pc}|{pcf}|{pcm}|{pcp}|{pct's}|{pd}|{pd's}|{pdl's}|{pdn}|{pf}|{pfc}|
  {pfd}|{pfft}|{pfg}|{pfl}|{pfx}|{pg}|{pgntt}|{pgnttrp}|{ph}|{phd}|{phl}|
  {phpht}|{phr}|{pht}|{phth}|{pj's}|{pkgs}|{pks}|{pkw}|{pl}|{plbr}|{plf}|{plp}|
  {plt}|{plz}|{pm}|{pm's}|{pmk}|{pms}|{pmsg}|{pn}|{pnc}|{pnxt}|{pp}|{ppb}|
  {pph}|{ppl}|{ppm}|{pps}|{ppt}|{pptn}|{pr}|{pr's}|{prc}|{prf}|{prl}|{prp}|
  {prv}|{prz}|{ps}|{psch}|{psh}|{psk}|{pss}|{psst}|{psst's}|{pssts}|{pst}|
  {pst's}|{psts}|{psw}|{pt}|{pt's}|{ptl}|{ptp}|{ptsd}|{ptt}|{ptts}|{pv}|{pvc}|
  {pvt}|{pwc}|{pz}|{qu}|{qub}|{qubb}|{qul}|{qulll}|{qum}|{qum's}|{qumr}|{qung}|
  {qung's}|{qur}|{qur'}|{qursh}|{qursh's}|{qurt}|{qutb}|{qutb's}|{r}|{r's}|
  {rb}|{rb's}|{rch}|{rcl}|{rct}|{rct's}|{rcvr}|{rd}|{rdh}|{rf}|{rf's}|{rfb}|
  {rfr}|{rfs}|{rfz}|{rg}|{rgl}|{rh}|{rh's}|{rhb}|{rhn}|{rjch}|{rl}|{rld}|{rm}|
  {rn}|{rn's}|{rp}|{rp's}|{rpm's}|{rr}|{rrh}|{rs}|{rsvp}|{rt}|{rtlt}|{rtw}|
  {rv}|{rw}|{rx}|{rxs}|{s}|{s'}|{s'h}|{s's}|{sb}|{sb's}|{sbl}|{sbr}|{sbw}|{sc}|
  {sc's}|{sccl}|{scd}|{scf}|{scfh}|{scfm}|{sch}|{sch's}|{schb}|{schftz}|
  {schftz's}|{schl}|{schm}|{schn}|{schr}|{schrd}|{scht}|{schw}|{scl}|{sclk}|
  {scnd}|{scr}|{scrfch}|{scs}|{sct}|{sctd}|{sd}|{sdlc}|{sdr}|{sds}|{sf}|{sfc}|
  {sfm}|{sfr}|{sfz}|{sg}|{sgml}|{sgr}|{sgt}|{sh}|{sh's}|{shch}|{shf}|{shfs}|
  {shh}|{shk}|{shl}|{shm}|{shn}|{shp}|{shr}|{shrr}|{sht}|{shtch}|{shtr}|{shv}|
  {shw}|{sj}|{sjl}|{sk}|{skh}|{skkv}|{skl}|{skr}|{skt}|{skt's}|{skv}|{sl}|
  {sl's}|{sldn}|{slt}|{sm}|{sm's}|{sml}|{smr}|{smrgs}|{smrr}|{sn}|{sn's}|{sng}|
  {snr}|{sp}|{sph}|{sphr}|{spl}|{spn}|{spr}|{sps}|{squ}|{squdg}|{sqush}|{sr}|
  {sr's}|{srb}|{srt}|{ss}|{ssh}|{ssp}|{sst}|{ssw}|{st}|{st's}|{stb}|{stch}|
  {stcl}|{stddmp}|{sth}|{stlg}|{stm}|{str}|{sv}|{svc}|{svgs}|{svr}|{sw}|{swbs}|
  {swbw}|{swl}|{swtz}|{swtz's}|{sz}|{szcz}|{szl}|{t}|{t'}|{t's}|{tb}|{tb's}|
  {tbss}|{tc}|{tc's}|{tch}|{tchr}|{tchw}|{tck}|{tcp}|{td}|{td's}|{tdr}|{tdt}|
  {tfr}|{tgn}|{tgt}|{th}|{th's}|{thb}|{thd}|{thj}|{thl}|{thm}|{thr}|{thrs}|
  {ths}|{thw}|{tj}|{tk}|{tl}|{tl's}|{tlc}|{tln}|{tlr}|{tm}|{tm's}|{tmh}|{tmv}|
  {tng}|{tng's}|{tnt}|{tp}|{tpd}|{tph}|{tpk}|{tpm}|{tps}|{tr}|{tr's}|{trf}|
  {trm}|{trn}|{trp}|{trps}|{trs}|{trst}|{trst's}|{trstr}|{trt}|{ts}|{tsch}|
  {tsh}|{tshw}|{tsk}|{tsks}|{tsktsk}|{tsktsks}|{tss}|{tst}|{tsv}|{tsw}|{tt}|
  {tv}|{tv's}|{tw}|{twp}|{tx}|{txt}|{tz}|{v}|{v's}|{vc}|{vcr}|{vfw}|{vh}|{vhf}|
  {vl}|{vlf}|{vls}|{vlt}|{vm}|{vms}|{vn}|{vp}|{vr}|{vrb}|{vs}|{vss}|{vst}|
  {vstgt}|{vt}|{vvll}|{w}|{w's}|{wb}|{wb's}|{wbn}|{wbn's}|{wbs}|{wfrm}|
  {wfrm's}|{wfrtt}|{wfrzb}|{wh}|{wh's}|{whr}|{whs}|{wjc}|{wl}|{wm}|{wm's}|
  {wnw}|{wpm's}|{wr}|{wrnt}|{ws}|{wsw}|{wt}|{wtv}|{www}|{x}|{x'}|{x's}|{xc}|
  {xcl}|{xctl}|{xd}|{xh}|{xl}|{xm}|{xn}|{xnt}|{xr}|{xs}|{xt}|{xv}|{xw}|{xx}|
  {xxv}|{xxx}|{y}|{y'}|{y's}|{yb}|{yb's}|{ybl}|{ybr}|{yc}|{ycl}|{yd}|{ydr}|
  {yds}|{yf}|{yf's}|{yfnn}|{yg}|{ygdr}|{yggdr}|{ygl}|{yhwh}|{yl}|{ylk}|{yll}|
  {ym}|{ymc}|{ymp}|{ympt}|{yn}|{yp}|{ypl}|{ypr}|{yps}|{yqu}|{yr}|{yr's}|{yrbk}|
  {yrn}|{ys}|{ysh}|{ysl}|{yss}|{yt}|{yth}|{ytt}|{yttr}|{yv}|{yw}|{ywc}|{ywr}|
  {z}|{z's}|{zh}|{zhd}|{zhm}|{zk}|{zl}|{zl's}|{zm}|{zn}|{zn's}|{zr}|{zr's}|
  {zs}|{zt}|{zw}|{zz}|{zz's}|{zzz}
];

# This is the fully-generate definition used by the PHP implementation.
# Results in a 150M FST with a state for every possible consonant cluster
define PHPICC [ [ (s) {qu} ] | [ \VOWEL [\VOWELY]^<4 ] ] & [LETTER+];

# This tweak greatly reduces the size of the generated FST, from >70M to 1M.
#define ICC PHPICC;
define ICC INSANEICC;

# Add brackets around the re-positioned piece of the input word
#  sleep => [initial][[sl]]eep[[?]]ay
define BRACKETEND [..] -> "[[" ICC "]]" a y || _ .#.;
define BRACKETSTART ICC @-> INITIAL'TOKEN "[[" ... "]]" || .#. _;
# Constrain the end brackets to match the start brackets
#  sleep => [initial][[sl]]eep[[sl]]ay
define BRACKETMATCH _eq([ ICC [LETTER|{'}]* ] .o. BRACKETEND .o. BRACKETSTART,
                        "[[", "]]");
# Remove the bracketed initial consonants and the brackets around the final
# consonants
#  [initial][[sl]]eep[[sl]]ay => eepslay
define REMOVEPIGBRACKETS [
  .#. INITIAL'TOKEN "[[" [\BRACKETS]* "]]" -> 0
] .o. REMOVEBRACKETS;

# All lowercase pig latin words which originally started with a consonant
define CPIGWORDS BRACKETMATCH .o. REMOVEPIGBRACKETS;

# All lowercase pig latin words which originally started with a vowel
define VPIGWORDS [ VOWEL [LETTER|{'}]* ] .o. [..] -> w a y || _ .#.;

# All lowercase pig latin words
define PIGWORDS CPIGWORDS .P. VPIGWORDS;

# From PHP: only process words consisting of standard English alphabet;
# ignore single letters and words which aren't lowercase or uppercase-first.
define PHPWORDS LETTER [LETTER|{'}]+;

# Define the transducer on (all lowercase) PHPWORDS, but use priority union
# to also define transducer on initial-cap case words, and then use identity
# transducer on any other words.
define PWORD [PHPWORDS .o. PIGWORDS] .P.
  [MAKECAPCASE(PHPWORDS) .o. DOWNCASE .o. PIGWORDS .o.
   [[?.o.UPCASE] IDENTITY]] .P. [PHPAZaz+];

# Split input into words
define BYWORDS(word,break) break* (word [ break+ word ]* break*);

define CONVERT'EN'X'PIGLATIN BYWORDS(PWORD,BREAK);

## Naive inverse, but this is not a "functional" transducer
## (That is, some inputs map to more than one output.)
#define FROMPIGLATIN0 CONVERT'EN'X'PIGLATIN.i;

# VPIGWORDS.i is functional.  It's only CPIGWORDS.i which is ambiguous.
# We resolve the ambiguity by trying to move as few letters as possible
# (consistent with preferring VPIGWORDS over CPIGWORDS).
define CPIG(limit) CPIGWORDS.i & [ ?* .x. [[ICC & limit] VOWELY [LETTER|{'}]*]];
define CPIG1 CPIG(PHPAZaz^1);
define CPIG2 CPIG(PHPAZaz^2);
define CPIG3 CPIG(PHPAZaz^3);
define CPIG4 CPIG(PHPAZaz^4);
define CPIG5 CPIG(PHPAZaz^>4);
define PIGWORDSi VPIGWORDS.i .P. CPIG1 .P. CPIG2 .P. CPIG3 .P. CPIG4 .P. CPIG5;
define PWORDi [PHPWORDS .o. PIGWORDSi] .P.
  [MAKECAPCASE(PHPWORDS) .o. DOWNCASE .o. PIGWORDSi .o. [[?.o.UPCASE] IDENTITY]] .P. [PHPAZaz+];
define CONVERT'EN BYWORDS(PWORDi,BREAK);

# note interesting ambiguities for 'of', 'in', and 'stop', 'avaScriptJay'

# Bracketing code:
# In this case, 'longest safe' strings make more sense than 'shortest unsafe'
# strings, since every string is unsafe until it has the trailing 'ay'

# Generate and save the transducers

regex TEST'UPPER'UNIVERSAL(CONVERT'EN'X'PIGLATIN);
echo EXPECT[trans-en-x-piglatin universal]: 1 (1 = TRUE, 0 = FALSE)
test null
pop stack

regex CONVERT'EN'X'PIGLATIN;
minimize net
echo EXPECT[trans-en-x-piglatin functional]: 1 (1 = TRUE, 0 = FALSE)
test functional
byte machine
write att trans-en-x-piglatin.att
pop stack

regex LONGSAFEWORD'NOT'OK(CONVERT'EN'X'PIGLATIN .o. CONVERT'EN, BREAK);
echo EXPECT[brack-en-x-piglatin-en safe]: 1 (1 = TRUE, 0 = FALSE)
test null
print shortest-string
pop stack

regex LONGSAFEWORD(CONVERT'EN'X'PIGLATIN .o. CONVERT'EN, BREAK);
minimize net
echo EXPECT[brack-en-x-piglatin-en functional]: 1 (1 = TRUE, 0 = FALSE)
test functional
byte machine
write att brack-en-x-piglatin-en.att
pop stack

regex LONGSAFEWORD'NOT'OK(CONVERT'EN'X'PIGLATIN .o. IDENTITY, BREAK);
echo EXPECT[brack-en-x-piglatin-noop safe]: 1 (1 = TRUE, 0 = FALSE)
test null
print shortest-string
pop stack

regex LONGSAFEWORD(CONVERT'EN'X'PIGLATIN .o. IDENTITY, BREAK);
minimize net
echo EXPECT[brack-en-x-piglatin-noop functional]: 1 (1 = TRUE, 0 = FALSE)
test functional
byte machine
write att brack-en-x-piglatin-noop.att
pop stack


regex TEST'UPPER'UNIVERSAL(CONVERT'EN);
echo EXPECT[trans-en universal]: 1 (1 = TRUE, 0 = FALSE)
test null
pop stack

regex CONVERT'EN;
minimize net
echo EXPECT[trans-en functional]: 1 (1 = TRUE, 0 = FALSE)
test functional
byte machine
write att trans-en.att
pop stack

regex LONGSAFEWORD'NOT'OK(CONVERT'EN .o. CONVERT'EN'X'PIGLATIN, BREAK);
echo EXPECT[brack-en-en-x-piglatin safe]: 1 (1 = TRUE, 0 = FALSE)
test null
print shortest-string
pop stack

regex LONGSAFEWORD(CONVERT'EN .o. CONVERT'EN'X'PIGLATIN, BREAK);
minimize net
echo EXPECT[brack-en-en-x-piglatin functional]: 1 (1 = TRUE, 0 = FALSE)
test functional
byte machine
write att brack-en-en-x-piglatin.att
pop stack

regex LONGSAFEWORD'NOT'OK(CONVERT'EN .o. IDENTITY, BREAK);
echo EXPECT[brack-en-noop safe]: 1 (1 = TRUE, 0 = FALSE)
test null
print shortest-string
pop stack

regex LONGSAFEWORD(CONVERT'EN .o. IDENTITY,BREAK);
minimize net
echo EXPECT[brack-en-noop functional]: 1 (1 = TRUE, 0 = FALSE)
test functional
byte machine
write att brack-en-noop.att
pop stack
