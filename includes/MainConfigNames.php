<?php
/**
 * This file is automatically generated using maintenance/generateConfigSchema.php.
 * Do not modify this file manually, edit includes/MainConfigSchema.php instead.
 * @file
 * @ingroup Config
 */

// phpcs:disable Generic.NamingConventions.UpperCaseConstantName.ClassConstantNotUpperCase
// phpcs:disable Generic.Files.LineLength.TooLong
namespace MediaWiki;

/**
 * A class containing constants representing the names of configuration variables.
 * These constants can be used in calls to Config::get() or with ServiceOptions,
 * to protect against typos and to make it easier to discover documentation about
 * the respective config setting.
 *
 * @note this class is generated automatically by maintenance/generateConfigSchema.php
 * @since 1.38
 */
class MainConfigNames {

	/**
	 * Name constant for the ConfigRegistry setting, for use with Config::get()
	 * @see MainConfigSchema::ConfigRegistry
	 */
	public const ConfigRegistry = 'ConfigRegistry';

	/**
	 * Name constant for the Sitename setting, for use with Config::get()
	 * @see MainConfigSchema::Sitename
	 */
	public const Sitename = 'Sitename';

	/**
	 * Name constant for the Server setting, for use with Config::get()
	 * @see MainConfigSchema::Server
	 */
	public const Server = 'Server';

	/**
	 * Name constant for the CanonicalServer setting, for use with Config::get()
	 * @see MainConfigSchema::CanonicalServer
	 */
	public const CanonicalServer = 'CanonicalServer';

	/**
	 * Name constant for the ServerName setting, for use with Config::get()
	 * @see MainConfigSchema::ServerName
	 */
	public const ServerName = 'ServerName';

	/**
	 * Name constant for the AssumeProxiesUseDefaultProtocolPorts setting, for use with Config::get()
	 * @see MainConfigSchema::AssumeProxiesUseDefaultProtocolPorts
	 */
	public const AssumeProxiesUseDefaultProtocolPorts = 'AssumeProxiesUseDefaultProtocolPorts';

	/**
	 * Name constant for the HttpsPort setting, for use with Config::get()
	 * @see MainConfigSchema::HttpsPort
	 */
	public const HttpsPort = 'HttpsPort';

	/**
	 * Name constant for the ForceHTTPS setting, for use with Config::get()
	 * @see MainConfigSchema::ForceHTTPS
	 */
	public const ForceHTTPS = 'ForceHTTPS';

	/**
	 * Name constant for the ScriptPath setting, for use with Config::get()
	 * @see MainConfigSchema::ScriptPath
	 */
	public const ScriptPath = 'ScriptPath';

	/**
	 * Name constant for the UsePathInfo setting, for use with Config::get()
	 * @see MainConfigSchema::UsePathInfo
	 */
	public const UsePathInfo = 'UsePathInfo';

	/**
	 * Name constant for the Script setting, for use with Config::get()
	 * @see MainConfigSchema::Script
	 */
	public const Script = 'Script';

	/**
	 * Name constant for the LoadScript setting, for use with Config::get()
	 * @see MainConfigSchema::LoadScript
	 */
	public const LoadScript = 'LoadScript';

	/**
	 * Name constant for the RestPath setting, for use with Config::get()
	 * @see MainConfigSchema::RestPath
	 */
	public const RestPath = 'RestPath';

	/**
	 * Name constant for the StylePath setting, for use with Config::get()
	 * @see MainConfigSchema::StylePath
	 */
	public const StylePath = 'StylePath';

	/**
	 * Name constant for the LocalStylePath setting, for use with Config::get()
	 * @see MainConfigSchema::LocalStylePath
	 */
	public const LocalStylePath = 'LocalStylePath';

	/**
	 * Name constant for the ExtensionAssetsPath setting, for use with Config::get()
	 * @see MainConfigSchema::ExtensionAssetsPath
	 */
	public const ExtensionAssetsPath = 'ExtensionAssetsPath';

	/**
	 * Name constant for the ExtensionDirectory setting, for use with Config::get()
	 * @see MainConfigSchema::ExtensionDirectory
	 */
	public const ExtensionDirectory = 'ExtensionDirectory';

	/**
	 * Name constant for the StyleDirectory setting, for use with Config::get()
	 * @see MainConfigSchema::StyleDirectory
	 */
	public const StyleDirectory = 'StyleDirectory';

	/**
	 * Name constant for the BaseDirectory setting, for use with Config::get()
	 * @see MainConfigSchema::BaseDirectory
	 */
	public const BaseDirectory = 'BaseDirectory';

	/**
	 * Name constant for the ArticlePath setting, for use with Config::get()
	 * @see MainConfigSchema::ArticlePath
	 */
	public const ArticlePath = 'ArticlePath';

	/**
	 * Name constant for the UploadPath setting, for use with Config::get()
	 * @see MainConfigSchema::UploadPath
	 */
	public const UploadPath = 'UploadPath';

	/**
	 * Name constant for the ImgAuthPath setting, for use with Config::get()
	 * @see MainConfigSchema::ImgAuthPath
	 */
	public const ImgAuthPath = 'ImgAuthPath';

	/**
	 * Name constant for the ThumbPath setting, for use with Config::get()
	 * @see MainConfigSchema::ThumbPath
	 */
	public const ThumbPath = 'ThumbPath';

	/**
	 * Name constant for the UploadDirectory setting, for use with Config::get()
	 * @see MainConfigSchema::UploadDirectory
	 */
	public const UploadDirectory = 'UploadDirectory';

	/**
	 * Name constant for the FileCacheDirectory setting, for use with Config::get()
	 * @see MainConfigSchema::FileCacheDirectory
	 */
	public const FileCacheDirectory = 'FileCacheDirectory';

	/**
	 * Name constant for the Logo setting, for use with Config::get()
	 * @see MainConfigSchema::Logo
	 */
	public const Logo = 'Logo';

	/**
	 * Name constant for the Logos setting, for use with Config::get()
	 * @see MainConfigSchema::Logos
	 */
	public const Logos = 'Logos';

	/**
	 * Name constant for the LogoHD setting, for use with Config::get()
	 * @see MainConfigSchema::LogoHD
	 * @deprecated since 1.35. Developers should retrieve this logo (and other variants) using
	 *    the static function MediaWiki\ResourceLoader\SkinModule::getAvailableLogos.
	 *    $wgLogos should be used instead.
	 */
	public const LogoHD = 'LogoHD';

	/**
	 * Name constant for the Favicon setting, for use with Config::get()
	 * @see MainConfigSchema::Favicon
	 */
	public const Favicon = 'Favicon';

	/**
	 * Name constant for the AppleTouchIcon setting, for use with Config::get()
	 * @see MainConfigSchema::AppleTouchIcon
	 */
	public const AppleTouchIcon = 'AppleTouchIcon';

	/**
	 * Name constant for the ReferrerPolicy setting, for use with Config::get()
	 * @see MainConfigSchema::ReferrerPolicy
	 */
	public const ReferrerPolicy = 'ReferrerPolicy';

	/**
	 * Name constant for the TmpDirectory setting, for use with Config::get()
	 * @see MainConfigSchema::TmpDirectory
	 */
	public const TmpDirectory = 'TmpDirectory';

	/**
	 * Name constant for the UploadBaseUrl setting, for use with Config::get()
	 * @see MainConfigSchema::UploadBaseUrl
	 */
	public const UploadBaseUrl = 'UploadBaseUrl';

	/**
	 * Name constant for the UploadStashScalerBaseUrl setting, for use with Config::get()
	 * @see MainConfigSchema::UploadStashScalerBaseUrl
	 * @deprecated since 1.36 Use thumbProxyUrl in $wgLocalFileRepo
	 */
	public const UploadStashScalerBaseUrl = 'UploadStashScalerBaseUrl';

	/**
	 * Name constant for the ActionPaths setting, for use with Config::get()
	 * @see MainConfigSchema::ActionPaths
	 */
	public const ActionPaths = 'ActionPaths';

	/**
	 * Name constant for the MainPageIsDomainRoot setting, for use with Config::get()
	 * @see MainConfigSchema::MainPageIsDomainRoot
	 */
	public const MainPageIsDomainRoot = 'MainPageIsDomainRoot';

	/**
	 * Name constant for the EnableUploads setting, for use with Config::get()
	 * @see MainConfigSchema::EnableUploads
	 */
	public const EnableUploads = 'EnableUploads';

	/**
	 * Name constant for the UploadStashMaxAge setting, for use with Config::get()
	 * @see MainConfigSchema::UploadStashMaxAge
	 */
	public const UploadStashMaxAge = 'UploadStashMaxAge';

	/**
	 * Name constant for the EnableAsyncUploads setting, for use with Config::get()
	 * @see MainConfigSchema::EnableAsyncUploads
	 */
	public const EnableAsyncUploads = 'EnableAsyncUploads';

	/**
	 * Name constant for the UploadMaintenance setting, for use with Config::get()
	 * @see MainConfigSchema::UploadMaintenance
	 */
	public const UploadMaintenance = 'UploadMaintenance';

	/**
	 * Name constant for the IllegalFileChars setting, for use with Config::get()
	 * @see MainConfigSchema::IllegalFileChars
	 */
	public const IllegalFileChars = 'IllegalFileChars';

	/**
	 * Name constant for the DeletedDirectory setting, for use with Config::get()
	 * @see MainConfigSchema::DeletedDirectory
	 */
	public const DeletedDirectory = 'DeletedDirectory';

	/**
	 * Name constant for the ImgAuthDetails setting, for use with Config::get()
	 * @see MainConfigSchema::ImgAuthDetails
	 */
	public const ImgAuthDetails = 'ImgAuthDetails';

	/**
	 * Name constant for the ImgAuthUrlPathMap setting, for use with Config::get()
	 * @see MainConfigSchema::ImgAuthUrlPathMap
	 */
	public const ImgAuthUrlPathMap = 'ImgAuthUrlPathMap';

	/**
	 * Name constant for the LocalFileRepo setting, for use with Config::get()
	 * @see MainConfigSchema::LocalFileRepo
	 */
	public const LocalFileRepo = 'LocalFileRepo';

	/**
	 * Name constant for the ForeignFileRepos setting, for use with Config::get()
	 * @see MainConfigSchema::ForeignFileRepos
	 */
	public const ForeignFileRepos = 'ForeignFileRepos';

	/**
	 * Name constant for the UseInstantCommons setting, for use with Config::get()
	 * @see MainConfigSchema::UseInstantCommons
	 */
	public const UseInstantCommons = 'UseInstantCommons';

	/**
	 * Name constant for the UseSharedUploads setting, for use with Config::get()
	 * @see MainConfigSchema::UseSharedUploads
	 */
	public const UseSharedUploads = 'UseSharedUploads';

	/**
	 * Name constant for the SharedUploadDirectory setting, for use with Config::get()
	 * @see MainConfigSchema::SharedUploadDirectory
	 */
	public const SharedUploadDirectory = 'SharedUploadDirectory';

	/**
	 * Name constant for the SharedUploadPath setting, for use with Config::get()
	 * @see MainConfigSchema::SharedUploadPath
	 */
	public const SharedUploadPath = 'SharedUploadPath';

	/**
	 * Name constant for the HashedSharedUploadDirectory setting, for use with Config::get()
	 * @see MainConfigSchema::HashedSharedUploadDirectory
	 */
	public const HashedSharedUploadDirectory = 'HashedSharedUploadDirectory';

	/**
	 * Name constant for the RepositoryBaseUrl setting, for use with Config::get()
	 * @see MainConfigSchema::RepositoryBaseUrl
	 */
	public const RepositoryBaseUrl = 'RepositoryBaseUrl';

	/**
	 * Name constant for the FetchCommonsDescriptions setting, for use with Config::get()
	 * @see MainConfigSchema::FetchCommonsDescriptions
	 */
	public const FetchCommonsDescriptions = 'FetchCommonsDescriptions';

	/**
	 * Name constant for the SharedUploadDBname setting, for use with Config::get()
	 * @see MainConfigSchema::SharedUploadDBname
	 */
	public const SharedUploadDBname = 'SharedUploadDBname';

	/**
	 * Name constant for the SharedUploadDBprefix setting, for use with Config::get()
	 * @see MainConfigSchema::SharedUploadDBprefix
	 */
	public const SharedUploadDBprefix = 'SharedUploadDBprefix';

	/**
	 * Name constant for the CacheSharedUploads setting, for use with Config::get()
	 * @see MainConfigSchema::CacheSharedUploads
	 */
	public const CacheSharedUploads = 'CacheSharedUploads';

	/**
	 * Name constant for the ForeignUploadTargets setting, for use with Config::get()
	 * @see MainConfigSchema::ForeignUploadTargets
	 */
	public const ForeignUploadTargets = 'ForeignUploadTargets';

	/**
	 * Name constant for the UploadDialog setting, for use with Config::get()
	 * @see MainConfigSchema::UploadDialog
	 */
	public const UploadDialog = 'UploadDialog';

	/**
	 * Name constant for the FileBackends setting, for use with Config::get()
	 * @see MainConfigSchema::FileBackends
	 */
	public const FileBackends = 'FileBackends';

	/**
	 * Name constant for the LockManagers setting, for use with Config::get()
	 * @see MainConfigSchema::LockManagers
	 */
	public const LockManagers = 'LockManagers';

	/**
	 * Name constant for the ShowEXIF setting, for use with Config::get()
	 * @see MainConfigSchema::ShowEXIF
	 */
	public const ShowEXIF = 'ShowEXIF';

	/**
	 * Name constant for the UpdateCompatibleMetadata setting, for use with Config::get()
	 * @see MainConfigSchema::UpdateCompatibleMetadata
	 */
	public const UpdateCompatibleMetadata = 'UpdateCompatibleMetadata';

	/**
	 * Name constant for the AllowCopyUploads setting, for use with Config::get()
	 * @see MainConfigSchema::AllowCopyUploads
	 */
	public const AllowCopyUploads = 'AllowCopyUploads';

	/**
	 * Name constant for the CopyUploadsDomains setting, for use with Config::get()
	 * @see MainConfigSchema::CopyUploadsDomains
	 */
	public const CopyUploadsDomains = 'CopyUploadsDomains';

	/**
	 * Name constant for the CopyUploadsFromSpecialUpload setting, for use with Config::get()
	 * @see MainConfigSchema::CopyUploadsFromSpecialUpload
	 */
	public const CopyUploadsFromSpecialUpload = 'CopyUploadsFromSpecialUpload';

	/**
	 * Name constant for the CopyUploadProxy setting, for use with Config::get()
	 * @see MainConfigSchema::CopyUploadProxy
	 */
	public const CopyUploadProxy = 'CopyUploadProxy';

	/**
	 * Name constant for the CopyUploadTimeout setting, for use with Config::get()
	 * @see MainConfigSchema::CopyUploadTimeout
	 */
	public const CopyUploadTimeout = 'CopyUploadTimeout';

	/**
	 * Name constant for the CopyUploadAllowOnWikiDomainConfig setting, for use with Config::get()
	 * @see MainConfigSchema::CopyUploadAllowOnWikiDomainConfig
	 */
	public const CopyUploadAllowOnWikiDomainConfig = 'CopyUploadAllowOnWikiDomainConfig';

	/**
	 * Name constant for the MaxUploadSize setting, for use with Config::get()
	 * @see MainConfigSchema::MaxUploadSize
	 */
	public const MaxUploadSize = 'MaxUploadSize';

	/**
	 * Name constant for the MinUploadChunkSize setting, for use with Config::get()
	 * @see MainConfigSchema::MinUploadChunkSize
	 */
	public const MinUploadChunkSize = 'MinUploadChunkSize';

	/**
	 * Name constant for the UploadNavigationUrl setting, for use with Config::get()
	 * @see MainConfigSchema::UploadNavigationUrl
	 */
	public const UploadNavigationUrl = 'UploadNavigationUrl';

	/**
	 * Name constant for the UploadMissingFileUrl setting, for use with Config::get()
	 * @see MainConfigSchema::UploadMissingFileUrl
	 */
	public const UploadMissingFileUrl = 'UploadMissingFileUrl';

	/**
	 * Name constant for the ThumbnailScriptPath setting, for use with Config::get()
	 * @see MainConfigSchema::ThumbnailScriptPath
	 */
	public const ThumbnailScriptPath = 'ThumbnailScriptPath';

	/**
	 * Name constant for the SharedThumbnailScriptPath setting, for use with Config::get()
	 * @see MainConfigSchema::SharedThumbnailScriptPath
	 */
	public const SharedThumbnailScriptPath = 'SharedThumbnailScriptPath';

	/**
	 * Name constant for the HashedUploadDirectory setting, for use with Config::get()
	 * @see MainConfigSchema::HashedUploadDirectory
	 */
	public const HashedUploadDirectory = 'HashedUploadDirectory';

	/**
	 * Name constant for the FileExtensions setting, for use with Config::get()
	 * @see MainConfigSchema::FileExtensions
	 */
	public const FileExtensions = 'FileExtensions';

	/**
	 * Name constant for the ProhibitedFileExtensions setting, for use with Config::get()
	 * @see MainConfigSchema::ProhibitedFileExtensions
	 */
	public const ProhibitedFileExtensions = 'ProhibitedFileExtensions';

	/**
	 * Name constant for the MimeTypeExclusions setting, for use with Config::get()
	 * @see MainConfigSchema::MimeTypeExclusions
	 */
	public const MimeTypeExclusions = 'MimeTypeExclusions';

	/**
	 * Name constant for the CheckFileExtensions setting, for use with Config::get()
	 * @see MainConfigSchema::CheckFileExtensions
	 */
	public const CheckFileExtensions = 'CheckFileExtensions';

	/**
	 * Name constant for the StrictFileExtensions setting, for use with Config::get()
	 * @see MainConfigSchema::StrictFileExtensions
	 */
	public const StrictFileExtensions = 'StrictFileExtensions';

	/**
	 * Name constant for the DisableUploadScriptChecks setting, for use with Config::get()
	 * @see MainConfigSchema::DisableUploadScriptChecks
	 */
	public const DisableUploadScriptChecks = 'DisableUploadScriptChecks';

	/**
	 * Name constant for the UploadSizeWarning setting, for use with Config::get()
	 * @see MainConfigSchema::UploadSizeWarning
	 */
	public const UploadSizeWarning = 'UploadSizeWarning';

	/**
	 * Name constant for the TrustedMediaFormats setting, for use with Config::get()
	 * @see MainConfigSchema::TrustedMediaFormats
	 */
	public const TrustedMediaFormats = 'TrustedMediaFormats';

	/**
	 * Name constant for the MediaHandlers setting, for use with Config::get()
	 * @see MainConfigSchema::MediaHandlers
	 */
	public const MediaHandlers = 'MediaHandlers';

	/**
	 * Name constant for the NativeImageLazyLoading setting, for use with Config::get()
	 * @see MainConfigSchema::NativeImageLazyLoading
	 */
	public const NativeImageLazyLoading = 'NativeImageLazyLoading';

	/**
	 * Name constant for the ParserTestMediaHandlers setting, for use with Config::get()
	 * @see MainConfigSchema::ParserTestMediaHandlers
	 */
	public const ParserTestMediaHandlers = 'ParserTestMediaHandlers';

	/**
	 * Name constant for the UseImageResize setting, for use with Config::get()
	 * @see MainConfigSchema::UseImageResize
	 */
	public const UseImageResize = 'UseImageResize';

	/**
	 * Name constant for the UseImageMagick setting, for use with Config::get()
	 * @see MainConfigSchema::UseImageMagick
	 */
	public const UseImageMagick = 'UseImageMagick';

	/**
	 * Name constant for the ImageMagickConvertCommand setting, for use with Config::get()
	 * @see MainConfigSchema::ImageMagickConvertCommand
	 */
	public const ImageMagickConvertCommand = 'ImageMagickConvertCommand';

	/**
	 * Name constant for the MaxInterlacingAreas setting, for use with Config::get()
	 * @see MainConfigSchema::MaxInterlacingAreas
	 */
	public const MaxInterlacingAreas = 'MaxInterlacingAreas';

	/**
	 * Name constant for the SharpenParameter setting, for use with Config::get()
	 * @see MainConfigSchema::SharpenParameter
	 */
	public const SharpenParameter = 'SharpenParameter';

	/**
	 * Name constant for the SharpenReductionThreshold setting, for use with Config::get()
	 * @see MainConfigSchema::SharpenReductionThreshold
	 */
	public const SharpenReductionThreshold = 'SharpenReductionThreshold';

	/**
	 * Name constant for the ImageMagickTempDir setting, for use with Config::get()
	 * @see MainConfigSchema::ImageMagickTempDir
	 */
	public const ImageMagickTempDir = 'ImageMagickTempDir';

	/**
	 * Name constant for the CustomConvertCommand setting, for use with Config::get()
	 * @see MainConfigSchema::CustomConvertCommand
	 */
	public const CustomConvertCommand = 'CustomConvertCommand';

	/**
	 * Name constant for the JpegTran setting, for use with Config::get()
	 * @see MainConfigSchema::JpegTran
	 */
	public const JpegTran = 'JpegTran';

	/**
	 * Name constant for the JpegPixelFormat setting, for use with Config::get()
	 * @see MainConfigSchema::JpegPixelFormat
	 */
	public const JpegPixelFormat = 'JpegPixelFormat';

	/**
	 * Name constant for the JpegQuality setting, for use with Config::get()
	 * @see MainConfigSchema::JpegQuality
	 */
	public const JpegQuality = 'JpegQuality';

	/**
	 * Name constant for the Exiv2Command setting, for use with Config::get()
	 * @see MainConfigSchema::Exiv2Command
	 */
	public const Exiv2Command = 'Exiv2Command';

	/**
	 * Name constant for the Exiftool setting, for use with Config::get()
	 * @see MainConfigSchema::Exiftool
	 */
	public const Exiftool = 'Exiftool';

	/**
	 * Name constant for the SVGConverters setting, for use with Config::get()
	 * @see MainConfigSchema::SVGConverters
	 */
	public const SVGConverters = 'SVGConverters';

	/**
	 * Name constant for the SVGConverter setting, for use with Config::get()
	 * @see MainConfigSchema::SVGConverter
	 */
	public const SVGConverter = 'SVGConverter';

	/**
	 * Name constant for the SVGConverterPath setting, for use with Config::get()
	 * @see MainConfigSchema::SVGConverterPath
	 */
	public const SVGConverterPath = 'SVGConverterPath';

	/**
	 * Name constant for the SVGMaxSize setting, for use with Config::get()
	 * @see MainConfigSchema::SVGMaxSize
	 */
	public const SVGMaxSize = 'SVGMaxSize';

	/**
	 * Name constant for the SVGMetadataCutoff setting, for use with Config::get()
	 * @see MainConfigSchema::SVGMetadataCutoff
	 */
	public const SVGMetadataCutoff = 'SVGMetadataCutoff';

	/**
	 * Name constant for the MediaInTargetLanguage setting, for use with Config::get()
	 * @see MainConfigSchema::MediaInTargetLanguage
	 */
	public const MediaInTargetLanguage = 'MediaInTargetLanguage';

	/**
	 * Name constant for the MaxImageArea setting, for use with Config::get()
	 * @see MainConfigSchema::MaxImageArea
	 */
	public const MaxImageArea = 'MaxImageArea';

	/**
	 * Name constant for the MaxAnimatedGifArea setting, for use with Config::get()
	 * @see MainConfigSchema::MaxAnimatedGifArea
	 */
	public const MaxAnimatedGifArea = 'MaxAnimatedGifArea';

	/**
	 * Name constant for the TiffThumbnailType setting, for use with Config::get()
	 * @see MainConfigSchema::TiffThumbnailType
	 */
	public const TiffThumbnailType = 'TiffThumbnailType';

	/**
	 * Name constant for the ThumbnailEpoch setting, for use with Config::get()
	 * @see MainConfigSchema::ThumbnailEpoch
	 */
	public const ThumbnailEpoch = 'ThumbnailEpoch';

	/**
	 * Name constant for the AttemptFailureEpoch setting, for use with Config::get()
	 * @see MainConfigSchema::AttemptFailureEpoch
	 */
	public const AttemptFailureEpoch = 'AttemptFailureEpoch';

	/**
	 * Name constant for the IgnoreImageErrors setting, for use with Config::get()
	 * @see MainConfigSchema::IgnoreImageErrors
	 */
	public const IgnoreImageErrors = 'IgnoreImageErrors';

	/**
	 * Name constant for the GenerateThumbnailOnParse setting, for use with Config::get()
	 * @see MainConfigSchema::GenerateThumbnailOnParse
	 */
	public const GenerateThumbnailOnParse = 'GenerateThumbnailOnParse';

	/**
	 * Name constant for the ShowArchiveThumbnails setting, for use with Config::get()
	 * @see MainConfigSchema::ShowArchiveThumbnails
	 */
	public const ShowArchiveThumbnails = 'ShowArchiveThumbnails';

	/**
	 * Name constant for the EnableAutoRotation setting, for use with Config::get()
	 * @see MainConfigSchema::EnableAutoRotation
	 */
	public const EnableAutoRotation = 'EnableAutoRotation';

	/**
	 * Name constant for the Antivirus setting, for use with Config::get()
	 * @see MainConfigSchema::Antivirus
	 */
	public const Antivirus = 'Antivirus';

	/**
	 * Name constant for the AntivirusSetup setting, for use with Config::get()
	 * @see MainConfigSchema::AntivirusSetup
	 */
	public const AntivirusSetup = 'AntivirusSetup';

	/**
	 * Name constant for the AntivirusRequired setting, for use with Config::get()
	 * @see MainConfigSchema::AntivirusRequired
	 */
	public const AntivirusRequired = 'AntivirusRequired';

	/**
	 * Name constant for the VerifyMimeType setting, for use with Config::get()
	 * @see MainConfigSchema::VerifyMimeType
	 */
	public const VerifyMimeType = 'VerifyMimeType';

	/**
	 * Name constant for the MimeTypeFile setting, for use with Config::get()
	 * @see MainConfigSchema::MimeTypeFile
	 */
	public const MimeTypeFile = 'MimeTypeFile';

	/**
	 * Name constant for the MimeInfoFile setting, for use with Config::get()
	 * @see MainConfigSchema::MimeInfoFile
	 */
	public const MimeInfoFile = 'MimeInfoFile';

	/**
	 * Name constant for the MimeDetectorCommand setting, for use with Config::get()
	 * @see MainConfigSchema::MimeDetectorCommand
	 */
	public const MimeDetectorCommand = 'MimeDetectorCommand';

	/**
	 * Name constant for the TrivialMimeDetection setting, for use with Config::get()
	 * @see MainConfigSchema::TrivialMimeDetection
	 */
	public const TrivialMimeDetection = 'TrivialMimeDetection';

	/**
	 * Name constant for the XMLMimeTypes setting, for use with Config::get()
	 * @see MainConfigSchema::XMLMimeTypes
	 */
	public const XMLMimeTypes = 'XMLMimeTypes';

	/**
	 * Name constant for the ImageLimits setting, for use with Config::get()
	 * @see MainConfigSchema::ImageLimits
	 */
	public const ImageLimits = 'ImageLimits';

	/**
	 * Name constant for the ThumbLimits setting, for use with Config::get()
	 * @see MainConfigSchema::ThumbLimits
	 */
	public const ThumbLimits = 'ThumbLimits';

	/**
	 * Name constant for the ThumbnailNamespaces setting, for use with Config::get()
	 * @see MainConfigSchema::ThumbnailNamespaces
	 */
	public const ThumbnailNamespaces = 'ThumbnailNamespaces';

	/**
	 * Name constant for the ThumbnailBuckets setting, for use with Config::get()
	 * @see MainConfigSchema::ThumbnailBuckets
	 */
	public const ThumbnailBuckets = 'ThumbnailBuckets';

	/**
	 * Name constant for the ThumbnailMinimumBucketDistance setting, for use with Config::get()
	 * @see MainConfigSchema::ThumbnailMinimumBucketDistance
	 */
	public const ThumbnailMinimumBucketDistance = 'ThumbnailMinimumBucketDistance';

	/**
	 * Name constant for the UploadThumbnailRenderMap setting, for use with Config::get()
	 * @see MainConfigSchema::UploadThumbnailRenderMap
	 */
	public const UploadThumbnailRenderMap = 'UploadThumbnailRenderMap';

	/**
	 * Name constant for the UploadThumbnailRenderMethod setting, for use with Config::get()
	 * @see MainConfigSchema::UploadThumbnailRenderMethod
	 */
	public const UploadThumbnailRenderMethod = 'UploadThumbnailRenderMethod';

	/**
	 * Name constant for the UploadThumbnailRenderHttpCustomHost setting, for use with Config::get()
	 * @see MainConfigSchema::UploadThumbnailRenderHttpCustomHost
	 */
	public const UploadThumbnailRenderHttpCustomHost = 'UploadThumbnailRenderHttpCustomHost';

	/**
	 * Name constant for the UploadThumbnailRenderHttpCustomDomain setting, for use with Config::get()
	 * @see MainConfigSchema::UploadThumbnailRenderHttpCustomDomain
	 */
	public const UploadThumbnailRenderHttpCustomDomain = 'UploadThumbnailRenderHttpCustomDomain';

	/**
	 * Name constant for the UseTinyRGBForJPGThumbnails setting, for use with Config::get()
	 * @see MainConfigSchema::UseTinyRGBForJPGThumbnails
	 */
	public const UseTinyRGBForJPGThumbnails = 'UseTinyRGBForJPGThumbnails';

	/**
	 * Name constant for the GalleryOptions setting, for use with Config::get()
	 * @see MainConfigSchema::GalleryOptions
	 */
	public const GalleryOptions = 'GalleryOptions';

	/**
	 * Name constant for the ThumbUpright setting, for use with Config::get()
	 * @see MainConfigSchema::ThumbUpright
	 */
	public const ThumbUpright = 'ThumbUpright';

	/**
	 * Name constant for the DirectoryMode setting, for use with Config::get()
	 * @see MainConfigSchema::DirectoryMode
	 */
	public const DirectoryMode = 'DirectoryMode';

	/**
	 * Name constant for the ResponsiveImages setting, for use with Config::get()
	 * @see MainConfigSchema::ResponsiveImages
	 */
	public const ResponsiveImages = 'ResponsiveImages';

	/**
	 * Name constant for the ImagePreconnect setting, for use with Config::get()
	 * @see MainConfigSchema::ImagePreconnect
	 */
	public const ImagePreconnect = 'ImagePreconnect';

	/**
	 * Name constant for the DjvuDump setting, for use with Config::get()
	 * @see MainConfigSchema::DjvuDump
	 */
	public const DjvuDump = 'DjvuDump';

	/**
	 * Name constant for the DjvuRenderer setting, for use with Config::get()
	 * @see MainConfigSchema::DjvuRenderer
	 */
	public const DjvuRenderer = 'DjvuRenderer';

	/**
	 * Name constant for the DjvuTxt setting, for use with Config::get()
	 * @see MainConfigSchema::DjvuTxt
	 */
	public const DjvuTxt = 'DjvuTxt';

	/**
	 * Name constant for the DjvuPostProcessor setting, for use with Config::get()
	 * @see MainConfigSchema::DjvuPostProcessor
	 */
	public const DjvuPostProcessor = 'DjvuPostProcessor';

	/**
	 * Name constant for the DjvuOutputExtension setting, for use with Config::get()
	 * @see MainConfigSchema::DjvuOutputExtension
	 */
	public const DjvuOutputExtension = 'DjvuOutputExtension';

	/**
	 * Name constant for the EmergencyContact setting, for use with Config::get()
	 * @see MainConfigSchema::EmergencyContact
	 */
	public const EmergencyContact = 'EmergencyContact';

	/**
	 * Name constant for the PasswordSender setting, for use with Config::get()
	 * @see MainConfigSchema::PasswordSender
	 */
	public const PasswordSender = 'PasswordSender';

	/**
	 * Name constant for the NoReplyAddress setting, for use with Config::get()
	 * @see MainConfigSchema::NoReplyAddress
	 */
	public const NoReplyAddress = 'NoReplyAddress';

	/**
	 * Name constant for the EnableEmail setting, for use with Config::get()
	 * @see MainConfigSchema::EnableEmail
	 */
	public const EnableEmail = 'EnableEmail';

	/**
	 * Name constant for the EnableUserEmail setting, for use with Config::get()
	 * @see MainConfigSchema::EnableUserEmail
	 */
	public const EnableUserEmail = 'EnableUserEmail';

	/**
	 * Name constant for the EnableSpecialMute setting, for use with Config::get()
	 * @see MainConfigSchema::EnableSpecialMute
	 */
	public const EnableSpecialMute = 'EnableSpecialMute';

	/**
	 * Name constant for the EnableUserEmailMuteList setting, for use with Config::get()
	 * @see MainConfigSchema::EnableUserEmailMuteList
	 */
	public const EnableUserEmailMuteList = 'EnableUserEmailMuteList';

	/**
	 * Name constant for the UserEmailUseReplyTo setting, for use with Config::get()
	 * @see MainConfigSchema::UserEmailUseReplyTo
	 */
	public const UserEmailUseReplyTo = 'UserEmailUseReplyTo';

	/**
	 * Name constant for the PasswordReminderResendTime setting, for use with Config::get()
	 * @see MainConfigSchema::PasswordReminderResendTime
	 */
	public const PasswordReminderResendTime = 'PasswordReminderResendTime';

	/**
	 * Name constant for the NewPasswordExpiry setting, for use with Config::get()
	 * @see MainConfigSchema::NewPasswordExpiry
	 */
	public const NewPasswordExpiry = 'NewPasswordExpiry';

	/**
	 * Name constant for the UserEmailConfirmationTokenExpiry setting, for use with Config::get()
	 * @see MainConfigSchema::UserEmailConfirmationTokenExpiry
	 */
	public const UserEmailConfirmationTokenExpiry = 'UserEmailConfirmationTokenExpiry';

	/**
	 * Name constant for the PasswordExpirationDays setting, for use with Config::get()
	 * @see MainConfigSchema::PasswordExpirationDays
	 */
	public const PasswordExpirationDays = 'PasswordExpirationDays';

	/**
	 * Name constant for the PasswordExpireGrace setting, for use with Config::get()
	 * @see MainConfigSchema::PasswordExpireGrace
	 */
	public const PasswordExpireGrace = 'PasswordExpireGrace';

	/**
	 * Name constant for the SMTP setting, for use with Config::get()
	 * @see MainConfigSchema::SMTP
	 */
	public const SMTP = 'SMTP';

	/**
	 * Name constant for the AdditionalMailParams setting, for use with Config::get()
	 * @see MainConfigSchema::AdditionalMailParams
	 */
	public const AdditionalMailParams = 'AdditionalMailParams';

	/**
	 * Name constant for the AllowHTMLEmail setting, for use with Config::get()
	 * @see MainConfigSchema::AllowHTMLEmail
	 */
	public const AllowHTMLEmail = 'AllowHTMLEmail';

	/**
	 * Name constant for the EnotifFromEditor setting, for use with Config::get()
	 * @see MainConfigSchema::EnotifFromEditor
	 */
	public const EnotifFromEditor = 'EnotifFromEditor';

	/**
	 * Name constant for the EmailAuthentication setting, for use with Config::get()
	 * @see MainConfigSchema::EmailAuthentication
	 */
	public const EmailAuthentication = 'EmailAuthentication';

	/**
	 * Name constant for the EnotifWatchlist setting, for use with Config::get()
	 * @see MainConfigSchema::EnotifWatchlist
	 */
	public const EnotifWatchlist = 'EnotifWatchlist';

	/**
	 * Name constant for the EnotifUserTalk setting, for use with Config::get()
	 * @see MainConfigSchema::EnotifUserTalk
	 */
	public const EnotifUserTalk = 'EnotifUserTalk';

	/**
	 * Name constant for the EnotifRevealEditorAddress setting, for use with Config::get()
	 * @see MainConfigSchema::EnotifRevealEditorAddress
	 */
	public const EnotifRevealEditorAddress = 'EnotifRevealEditorAddress';

	/**
	 * Name constant for the EnotifMinorEdits setting, for use with Config::get()
	 * @see MainConfigSchema::EnotifMinorEdits
	 */
	public const EnotifMinorEdits = 'EnotifMinorEdits';

	/**
	 * Name constant for the EnotifImpersonal setting, for use with Config::get()
	 * @see MainConfigSchema::EnotifImpersonal
	 */
	public const EnotifImpersonal = 'EnotifImpersonal';

	/**
	 * Name constant for the EnotifMaxRecips setting, for use with Config::get()
	 * @see MainConfigSchema::EnotifMaxRecips
	 */
	public const EnotifMaxRecips = 'EnotifMaxRecips';

	/**
	 * Name constant for the EnotifUseRealName setting, for use with Config::get()
	 * @see MainConfigSchema::EnotifUseRealName
	 */
	public const EnotifUseRealName = 'EnotifUseRealName';

	/**
	 * Name constant for the UsersNotifiedOnAllChanges setting, for use with Config::get()
	 * @see MainConfigSchema::UsersNotifiedOnAllChanges
	 */
	public const UsersNotifiedOnAllChanges = 'UsersNotifiedOnAllChanges';

	/**
	 * Name constant for the DBname setting, for use with Config::get()
	 * @see MainConfigSchema::DBname
	 */
	public const DBname = 'DBname';

	/**
	 * Name constant for the DBmwschema setting, for use with Config::get()
	 * @see MainConfigSchema::DBmwschema
	 */
	public const DBmwschema = 'DBmwschema';

	/**
	 * Name constant for the DBprefix setting, for use with Config::get()
	 * @see MainConfigSchema::DBprefix
	 */
	public const DBprefix = 'DBprefix';

	/**
	 * Name constant for the DBserver setting, for use with Config::get()
	 * @see MainConfigSchema::DBserver
	 */
	public const DBserver = 'DBserver';

	/**
	 * Name constant for the DBport setting, for use with Config::get()
	 * @see MainConfigSchema::DBport
	 */
	public const DBport = 'DBport';

	/**
	 * Name constant for the DBuser setting, for use with Config::get()
	 * @see MainConfigSchema::DBuser
	 */
	public const DBuser = 'DBuser';

	/**
	 * Name constant for the DBpassword setting, for use with Config::get()
	 * @see MainConfigSchema::DBpassword
	 */
	public const DBpassword = 'DBpassword';

	/**
	 * Name constant for the DBtype setting, for use with Config::get()
	 * @see MainConfigSchema::DBtype
	 */
	public const DBtype = 'DBtype';

	/**
	 * Name constant for the DBssl setting, for use with Config::get()
	 * @see MainConfigSchema::DBssl
	 */
	public const DBssl = 'DBssl';

	/**
	 * Name constant for the DBcompress setting, for use with Config::get()
	 * @see MainConfigSchema::DBcompress
	 */
	public const DBcompress = 'DBcompress';

	/**
	 * Name constant for the DBadminuser setting, for use with Config::get()
	 * @see MainConfigSchema::DBadminuser
	 */
	public const DBadminuser = 'DBadminuser';

	/**
	 * Name constant for the DBadminpassword setting, for use with Config::get()
	 * @see MainConfigSchema::DBadminpassword
	 */
	public const DBadminpassword = 'DBadminpassword';

	/**
	 * Name constant for the SearchType setting, for use with Config::get()
	 * @see MainConfigSchema::SearchType
	 */
	public const SearchType = 'SearchType';

	/**
	 * Name constant for the SearchTypeAlternatives setting, for use with Config::get()
	 * @see MainConfigSchema::SearchTypeAlternatives
	 */
	public const SearchTypeAlternatives = 'SearchTypeAlternatives';

	/**
	 * Name constant for the DBTableOptions setting, for use with Config::get()
	 * @see MainConfigSchema::DBTableOptions
	 */
	public const DBTableOptions = 'DBTableOptions';

	/**
	 * Name constant for the SQLMode setting, for use with Config::get()
	 * @see MainConfigSchema::SQLMode
	 */
	public const SQLMode = 'SQLMode';

	/**
	 * Name constant for the DBDefaultGroup setting, for use with Config::get()
	 * @see MainConfigSchema::DBDefaultGroup
	 */
	public const DBDefaultGroup = 'DBDefaultGroup';

	/**
	 * Name constant for the SQLiteDataDir setting, for use with Config::get()
	 * @see MainConfigSchema::SQLiteDataDir
	 */
	public const SQLiteDataDir = 'SQLiteDataDir';

	/**
	 * Name constant for the SharedDB setting, for use with Config::get()
	 * @see MainConfigSchema::SharedDB
	 */
	public const SharedDB = 'SharedDB';

	/**
	 * Name constant for the SharedPrefix setting, for use with Config::get()
	 * @see MainConfigSchema::SharedPrefix
	 */
	public const SharedPrefix = 'SharedPrefix';

	/**
	 * Name constant for the SharedTables setting, for use with Config::get()
	 * @see MainConfigSchema::SharedTables
	 */
	public const SharedTables = 'SharedTables';

	/**
	 * Name constant for the SharedSchema setting, for use with Config::get()
	 * @see MainConfigSchema::SharedSchema
	 */
	public const SharedSchema = 'SharedSchema';

	/**
	 * Name constant for the DBservers setting, for use with Config::get()
	 * @see MainConfigSchema::DBservers
	 */
	public const DBservers = 'DBservers';

	/**
	 * Name constant for the LBFactoryConf setting, for use with Config::get()
	 * @see MainConfigSchema::LBFactoryConf
	 */
	public const LBFactoryConf = 'LBFactoryConf';

	/**
	 * Name constant for the DataCenterUpdateStickTTL setting, for use with Config::get()
	 * @see MainConfigSchema::DataCenterUpdateStickTTL
	 */
	public const DataCenterUpdateStickTTL = 'DataCenterUpdateStickTTL';

	/**
	 * Name constant for the DBerrorLog setting, for use with Config::get()
	 * @see MainConfigSchema::DBerrorLog
	 */
	public const DBerrorLog = 'DBerrorLog';

	/**
	 * Name constant for the DBerrorLogTZ setting, for use with Config::get()
	 * @see MainConfigSchema::DBerrorLogTZ
	 */
	public const DBerrorLogTZ = 'DBerrorLogTZ';

	/**
	 * Name constant for the LocalDatabases setting, for use with Config::get()
	 * @see MainConfigSchema::LocalDatabases
	 */
	public const LocalDatabases = 'LocalDatabases';

	/**
	 * Name constant for the DatabaseReplicaLagWarning setting, for use with Config::get()
	 * @see MainConfigSchema::DatabaseReplicaLagWarning
	 */
	public const DatabaseReplicaLagWarning = 'DatabaseReplicaLagWarning';

	/**
	 * Name constant for the DatabaseReplicaLagCritical setting, for use with Config::get()
	 * @see MainConfigSchema::DatabaseReplicaLagCritical
	 */
	public const DatabaseReplicaLagCritical = 'DatabaseReplicaLagCritical';

	/**
	 * Name constant for the MaxExecutionTimeForExpensiveQueries setting, for use with Config::get()
	 * @see MainConfigSchema::MaxExecutionTimeForExpensiveQueries
	 */
	public const MaxExecutionTimeForExpensiveQueries = 'MaxExecutionTimeForExpensiveQueries';

	/**
	 * Name constant for the TemplateLinksSchemaMigrationStage setting, for use with Config::get()
	 * @see MainConfigSchema::TemplateLinksSchemaMigrationStage
	 */
	public const TemplateLinksSchemaMigrationStage = 'TemplateLinksSchemaMigrationStage';

	/**
	 * Name constant for the ExternalLinksSchemaMigrationStage setting, for use with Config::get()
	 * @see MainConfigSchema::ExternalLinksSchemaMigrationStage
	 */
	public const ExternalLinksSchemaMigrationStage = 'ExternalLinksSchemaMigrationStage';

	/**
	 * Name constant for the CommentTempTableSchemaMigrationStage setting, for use with Config::get()
	 * @see MainConfigSchema::CommentTempTableSchemaMigrationStage
	 */
	public const CommentTempTableSchemaMigrationStage = 'CommentTempTableSchemaMigrationStage';

	/**
	 * Name constant for the ContentHandlers setting, for use with Config::get()
	 * @see MainConfigSchema::ContentHandlers
	 */
	public const ContentHandlers = 'ContentHandlers';

	/**
	 * Name constant for the NamespaceContentModels setting, for use with Config::get()
	 * @see MainConfigSchema::NamespaceContentModels
	 */
	public const NamespaceContentModels = 'NamespaceContentModels';

	/**
	 * Name constant for the ContentHandlerTextFallback setting, for use with Config::get()
	 * @see MainConfigSchema::ContentHandlerTextFallback
	 * @deprecated since 1.37
	 */
	public const ContentHandlerTextFallback = 'ContentHandlerTextFallback';

	/**
	 * Name constant for the TextModelsToParse setting, for use with Config::get()
	 * @see MainConfigSchema::TextModelsToParse
	 */
	public const TextModelsToParse = 'TextModelsToParse';

	/**
	 * Name constant for the CompressRevisions setting, for use with Config::get()
	 * @see MainConfigSchema::CompressRevisions
	 */
	public const CompressRevisions = 'CompressRevisions';

	/**
	 * Name constant for the ExternalStores setting, for use with Config::get()
	 * @see MainConfigSchema::ExternalStores
	 */
	public const ExternalStores = 'ExternalStores';

	/**
	 * Name constant for the ExternalServers setting, for use with Config::get()
	 * @see MainConfigSchema::ExternalServers
	 */
	public const ExternalServers = 'ExternalServers';

	/**
	 * Name constant for the DefaultExternalStore setting, for use with Config::get()
	 * @see MainConfigSchema::DefaultExternalStore
	 */
	public const DefaultExternalStore = 'DefaultExternalStore';

	/**
	 * Name constant for the RevisionCacheExpiry setting, for use with Config::get()
	 * @see MainConfigSchema::RevisionCacheExpiry
	 */
	public const RevisionCacheExpiry = 'RevisionCacheExpiry';

	/**
	 * Name constant for the PageLanguageUseDB setting, for use with Config::get()
	 * @see MainConfigSchema::PageLanguageUseDB
	 */
	public const PageLanguageUseDB = 'PageLanguageUseDB';

	/**
	 * Name constant for the DiffEngine setting, for use with Config::get()
	 * @see MainConfigSchema::DiffEngine
	 */
	public const DiffEngine = 'DiffEngine';

	/**
	 * Name constant for the ExternalDiffEngine setting, for use with Config::get()
	 * @see MainConfigSchema::ExternalDiffEngine
	 */
	public const ExternalDiffEngine = 'ExternalDiffEngine';

	/**
	 * Name constant for the RequestTimeLimit setting, for use with Config::get()
	 * @see MainConfigSchema::RequestTimeLimit
	 */
	public const RequestTimeLimit = 'RequestTimeLimit';

	/**
	 * Name constant for the TransactionalTimeLimit setting, for use with Config::get()
	 * @see MainConfigSchema::TransactionalTimeLimit
	 */
	public const TransactionalTimeLimit = 'TransactionalTimeLimit';

	/**
	 * Name constant for the CriticalSectionTimeLimit setting, for use with Config::get()
	 * @see MainConfigSchema::CriticalSectionTimeLimit
	 */
	public const CriticalSectionTimeLimit = 'CriticalSectionTimeLimit';

	/**
	 * Name constant for the MiserMode setting, for use with Config::get()
	 * @see MainConfigSchema::MiserMode
	 */
	public const MiserMode = 'MiserMode';

	/**
	 * Name constant for the DisableQueryPages setting, for use with Config::get()
	 * @see MainConfigSchema::DisableQueryPages
	 */
	public const DisableQueryPages = 'DisableQueryPages';

	/**
	 * Name constant for the QueryCacheLimit setting, for use with Config::get()
	 * @see MainConfigSchema::QueryCacheLimit
	 */
	public const QueryCacheLimit = 'QueryCacheLimit';

	/**
	 * Name constant for the WantedPagesThreshold setting, for use with Config::get()
	 * @see MainConfigSchema::WantedPagesThreshold
	 */
	public const WantedPagesThreshold = 'WantedPagesThreshold';

	/**
	 * Name constant for the AllowSlowParserFunctions setting, for use with Config::get()
	 * @see MainConfigSchema::AllowSlowParserFunctions
	 */
	public const AllowSlowParserFunctions = 'AllowSlowParserFunctions';

	/**
	 * Name constant for the AllowSchemaUpdates setting, for use with Config::get()
	 * @see MainConfigSchema::AllowSchemaUpdates
	 */
	public const AllowSchemaUpdates = 'AllowSchemaUpdates';

	/**
	 * Name constant for the MaxArticleSize setting, for use with Config::get()
	 * @see MainConfigSchema::MaxArticleSize
	 */
	public const MaxArticleSize = 'MaxArticleSize';

	/**
	 * Name constant for the MemoryLimit setting, for use with Config::get()
	 * @see MainConfigSchema::MemoryLimit
	 */
	public const MemoryLimit = 'MemoryLimit';

	/**
	 * Name constant for the PoolCounterConf setting, for use with Config::get()
	 * @see MainConfigSchema::PoolCounterConf
	 */
	public const PoolCounterConf = 'PoolCounterConf';

	/**
	 * Name constant for the PoolCountClientConf setting, for use with Config::get()
	 * @see MainConfigSchema::PoolCountClientConf
	 */
	public const PoolCountClientConf = 'PoolCountClientConf';

	/**
	 * Name constant for the MaxUserDBWriteDuration setting, for use with Config::get()
	 * @see MainConfigSchema::MaxUserDBWriteDuration
	 */
	public const MaxUserDBWriteDuration = 'MaxUserDBWriteDuration';

	/**
	 * Name constant for the MaxJobDBWriteDuration setting, for use with Config::get()
	 * @see MainConfigSchema::MaxJobDBWriteDuration
	 */
	public const MaxJobDBWriteDuration = 'MaxJobDBWriteDuration';

	/**
	 * Name constant for the LinkHolderBatchSize setting, for use with Config::get()
	 * @see MainConfigSchema::LinkHolderBatchSize
	 */
	public const LinkHolderBatchSize = 'LinkHolderBatchSize';

	/**
	 * Name constant for the MaximumMovedPages setting, for use with Config::get()
	 * @see MainConfigSchema::MaximumMovedPages
	 */
	public const MaximumMovedPages = 'MaximumMovedPages';

	/**
	 * Name constant for the ForceDeferredUpdatesPreSend setting, for use with Config::get()
	 * @see MainConfigSchema::ForceDeferredUpdatesPreSend
	 */
	public const ForceDeferredUpdatesPreSend = 'ForceDeferredUpdatesPreSend';

	/**
	 * Name constant for the MultiShardSiteStats setting, for use with Config::get()
	 * @see MainConfigSchema::MultiShardSiteStats
	 */
	public const MultiShardSiteStats = 'MultiShardSiteStats';

	/**
	 * Name constant for the CacheDirectory setting, for use with Config::get()
	 * @see MainConfigSchema::CacheDirectory
	 */
	public const CacheDirectory = 'CacheDirectory';

	/**
	 * Name constant for the MainCacheType setting, for use with Config::get()
	 * @see MainConfigSchema::MainCacheType
	 */
	public const MainCacheType = 'MainCacheType';

	/**
	 * Name constant for the MessageCacheType setting, for use with Config::get()
	 * @see MainConfigSchema::MessageCacheType
	 */
	public const MessageCacheType = 'MessageCacheType';

	/**
	 * Name constant for the ParserCacheType setting, for use with Config::get()
	 * @see MainConfigSchema::ParserCacheType
	 */
	public const ParserCacheType = 'ParserCacheType';

	/**
	 * Name constant for the SessionCacheType setting, for use with Config::get()
	 * @see MainConfigSchema::SessionCacheType
	 */
	public const SessionCacheType = 'SessionCacheType';

	/**
	 * Name constant for the LanguageConverterCacheType setting, for use with Config::get()
	 * @see MainConfigSchema::LanguageConverterCacheType
	 */
	public const LanguageConverterCacheType = 'LanguageConverterCacheType';

	/**
	 * Name constant for the StatsCacheType setting, for use with Config::get()
	 * @see MainConfigSchema::StatsCacheType
	 */
	public const StatsCacheType = 'StatsCacheType';

	/**
	 * Name constant for the ObjectCaches setting, for use with Config::get()
	 * @see MainConfigSchema::ObjectCaches
	 */
	public const ObjectCaches = 'ObjectCaches';

	/**
	 * Name constant for the WANObjectCache setting, for use with Config::get()
	 * @see MainConfigSchema::WANObjectCache
	 */
	public const WANObjectCache = 'WANObjectCache';

	/**
	 * Name constant for the MainStash setting, for use with Config::get()
	 * @see MainConfigSchema::MainStash
	 */
	public const MainStash = 'MainStash';

	/**
	 * Name constant for the ParsoidCacheConfig setting, for use with Config::get()
	 * @see MainConfigSchema::ParsoidCacheConfig
	 */
	public const ParsoidCacheConfig = 'ParsoidCacheConfig';

	/**
	 * Name constant for the ChronologyProtectorStash setting, for use with Config::get()
	 * @see MainConfigSchema::ChronologyProtectorStash
	 */
	public const ChronologyProtectorStash = 'ChronologyProtectorStash';

	/**
	 * Name constant for the ParserCacheExpireTime setting, for use with Config::get()
	 * @see MainConfigSchema::ParserCacheExpireTime
	 */
	public const ParserCacheExpireTime = 'ParserCacheExpireTime';

	/**
	 * Name constant for the OldRevisionParserCacheExpireTime setting, for use with Config::get()
	 * @see MainConfigSchema::OldRevisionParserCacheExpireTime
	 */
	public const OldRevisionParserCacheExpireTime = 'OldRevisionParserCacheExpireTime';

	/**
	 * Name constant for the ObjectCacheSessionExpiry setting, for use with Config::get()
	 * @see MainConfigSchema::ObjectCacheSessionExpiry
	 */
	public const ObjectCacheSessionExpiry = 'ObjectCacheSessionExpiry';

	/**
	 * Name constant for the PHPSessionHandling setting, for use with Config::get()
	 * @see MainConfigSchema::PHPSessionHandling
	 */
	public const PHPSessionHandling = 'PHPSessionHandling';

	/**
	 * Name constant for the SuspiciousIpExpiry setting, for use with Config::get()
	 * @see MainConfigSchema::SuspiciousIpExpiry
	 */
	public const SuspiciousIpExpiry = 'SuspiciousIpExpiry';

	/**
	 * Name constant for the SessionPbkdf2Iterations setting, for use with Config::get()
	 * @see MainConfigSchema::SessionPbkdf2Iterations
	 */
	public const SessionPbkdf2Iterations = 'SessionPbkdf2Iterations';

	/**
	 * Name constant for the MemCachedServers setting, for use with Config::get()
	 * @see MainConfigSchema::MemCachedServers
	 */
	public const MemCachedServers = 'MemCachedServers';

	/**
	 * Name constant for the MemCachedPersistent setting, for use with Config::get()
	 * @see MainConfigSchema::MemCachedPersistent
	 */
	public const MemCachedPersistent = 'MemCachedPersistent';

	/**
	 * Name constant for the MemCachedTimeout setting, for use with Config::get()
	 * @see MainConfigSchema::MemCachedTimeout
	 */
	public const MemCachedTimeout = 'MemCachedTimeout';

	/**
	 * Name constant for the UseLocalMessageCache setting, for use with Config::get()
	 * @see MainConfigSchema::UseLocalMessageCache
	 */
	public const UseLocalMessageCache = 'UseLocalMessageCache';

	/**
	 * Name constant for the AdaptiveMessageCache setting, for use with Config::get()
	 * @see MainConfigSchema::AdaptiveMessageCache
	 */
	public const AdaptiveMessageCache = 'AdaptiveMessageCache';

	/**
	 * Name constant for the LocalisationCacheConf setting, for use with Config::get()
	 * @see MainConfigSchema::LocalisationCacheConf
	 */
	public const LocalisationCacheConf = 'LocalisationCacheConf';

	/**
	 * Name constant for the CachePages setting, for use with Config::get()
	 * @see MainConfigSchema::CachePages
	 */
	public const CachePages = 'CachePages';

	/**
	 * Name constant for the CacheEpoch setting, for use with Config::get()
	 * @see MainConfigSchema::CacheEpoch
	 */
	public const CacheEpoch = 'CacheEpoch';

	/**
	 * Name constant for the GitInfoCacheDirectory setting, for use with Config::get()
	 * @see MainConfigSchema::GitInfoCacheDirectory
	 */
	public const GitInfoCacheDirectory = 'GitInfoCacheDirectory';

	/**
	 * Name constant for the UseFileCache setting, for use with Config::get()
	 * @see MainConfigSchema::UseFileCache
	 */
	public const UseFileCache = 'UseFileCache';

	/**
	 * Name constant for the FileCacheDepth setting, for use with Config::get()
	 * @see MainConfigSchema::FileCacheDepth
	 */
	public const FileCacheDepth = 'FileCacheDepth';

	/**
	 * Name constant for the RenderHashAppend setting, for use with Config::get()
	 * @see MainConfigSchema::RenderHashAppend
	 */
	public const RenderHashAppend = 'RenderHashAppend';

	/**
	 * Name constant for the EnableSidebarCache setting, for use with Config::get()
	 * @see MainConfigSchema::EnableSidebarCache
	 */
	public const EnableSidebarCache = 'EnableSidebarCache';

	/**
	 * Name constant for the SidebarCacheExpiry setting, for use with Config::get()
	 * @see MainConfigSchema::SidebarCacheExpiry
	 */
	public const SidebarCacheExpiry = 'SidebarCacheExpiry';

	/**
	 * Name constant for the UseGzip setting, for use with Config::get()
	 * @see MainConfigSchema::UseGzip
	 */
	public const UseGzip = 'UseGzip';

	/**
	 * Name constant for the InvalidateCacheOnLocalSettingsChange setting, for use with Config::get()
	 * @see MainConfigSchema::InvalidateCacheOnLocalSettingsChange
	 */
	public const InvalidateCacheOnLocalSettingsChange = 'InvalidateCacheOnLocalSettingsChange';

	/**
	 * Name constant for the ExtensionInfoMTime setting, for use with Config::get()
	 * @see MainConfigSchema::ExtensionInfoMTime
	 */
	public const ExtensionInfoMTime = 'ExtensionInfoMTime';

	/**
	 * Name constant for the EnableRemoteBagOStuffTests setting, for use with Config::get()
	 * @see MainConfigSchema::EnableRemoteBagOStuffTests
	 */
	public const EnableRemoteBagOStuffTests = 'EnableRemoteBagOStuffTests';

	/**
	 * Name constant for the UseCdn setting, for use with Config::get()
	 * @see MainConfigSchema::UseCdn
	 */
	public const UseCdn = 'UseCdn';

	/**
	 * Name constant for the VaryOnXFP setting, for use with Config::get()
	 * @see MainConfigSchema::VaryOnXFP
	 */
	public const VaryOnXFP = 'VaryOnXFP';

	/**
	 * Name constant for the InternalServer setting, for use with Config::get()
	 * @see MainConfigSchema::InternalServer
	 */
	public const InternalServer = 'InternalServer';

	/**
	 * Name constant for the CdnMaxAge setting, for use with Config::get()
	 * @see MainConfigSchema::CdnMaxAge
	 */
	public const CdnMaxAge = 'CdnMaxAge';

	/**
	 * Name constant for the CdnMaxageLagged setting, for use with Config::get()
	 * @see MainConfigSchema::CdnMaxageLagged
	 */
	public const CdnMaxageLagged = 'CdnMaxageLagged';

	/**
	 * Name constant for the CdnMaxageStale setting, for use with Config::get()
	 * @see MainConfigSchema::CdnMaxageStale
	 */
	public const CdnMaxageStale = 'CdnMaxageStale';

	/**
	 * Name constant for the CdnReboundPurgeDelay setting, for use with Config::get()
	 * @see MainConfigSchema::CdnReboundPurgeDelay
	 */
	public const CdnReboundPurgeDelay = 'CdnReboundPurgeDelay';

	/**
	 * Name constant for the CdnMaxageSubstitute setting, for use with Config::get()
	 * @see MainConfigSchema::CdnMaxageSubstitute
	 */
	public const CdnMaxageSubstitute = 'CdnMaxageSubstitute';

	/**
	 * Name constant for the ForcedRawSMaxage setting, for use with Config::get()
	 * @see MainConfigSchema::ForcedRawSMaxage
	 */
	public const ForcedRawSMaxage = 'ForcedRawSMaxage';

	/**
	 * Name constant for the CdnServers setting, for use with Config::get()
	 * @see MainConfigSchema::CdnServers
	 */
	public const CdnServers = 'CdnServers';

	/**
	 * Name constant for the CdnServersNoPurge setting, for use with Config::get()
	 * @see MainConfigSchema::CdnServersNoPurge
	 */
	public const CdnServersNoPurge = 'CdnServersNoPurge';

	/**
	 * Name constant for the SquidPurgeUseHostHeader setting, for use with Config::get()
	 * @see MainConfigSchema::SquidPurgeUseHostHeader
	 * @deprecated since 1.33
	 */
	public const SquidPurgeUseHostHeader = 'SquidPurgeUseHostHeader';

	/**
	 * Name constant for the HTCPRouting setting, for use with Config::get()
	 * @see MainConfigSchema::HTCPRouting
	 */
	public const HTCPRouting = 'HTCPRouting';

	/**
	 * Name constant for the HTCPMulticastTTL setting, for use with Config::get()
	 * @see MainConfigSchema::HTCPMulticastTTL
	 */
	public const HTCPMulticastTTL = 'HTCPMulticastTTL';

	/**
	 * Name constant for the UsePrivateIPs setting, for use with Config::get()
	 * @see MainConfigSchema::UsePrivateIPs
	 */
	public const UsePrivateIPs = 'UsePrivateIPs';

	/**
	 * Name constant for the CdnMatchParameterOrder setting, for use with Config::get()
	 * @see MainConfigSchema::CdnMatchParameterOrder
	 */
	public const CdnMatchParameterOrder = 'CdnMatchParameterOrder';

	/**
	 * Name constant for the LanguageCode setting, for use with Config::get()
	 * @see MainConfigSchema::LanguageCode
	 */
	public const LanguageCode = 'LanguageCode';

	/**
	 * Name constant for the GrammarForms setting, for use with Config::get()
	 * @see MainConfigSchema::GrammarForms
	 */
	public const GrammarForms = 'GrammarForms';

	/**
	 * Name constant for the InterwikiMagic setting, for use with Config::get()
	 * @see MainConfigSchema::InterwikiMagic
	 */
	public const InterwikiMagic = 'InterwikiMagic';

	/**
	 * Name constant for the HideInterlanguageLinks setting, for use with Config::get()
	 * @see MainConfigSchema::HideInterlanguageLinks
	 */
	public const HideInterlanguageLinks = 'HideInterlanguageLinks';

	/**
	 * Name constant for the ExtraInterlanguageLinkPrefixes setting, for use with Config::get()
	 * @see MainConfigSchema::ExtraInterlanguageLinkPrefixes
	 */
	public const ExtraInterlanguageLinkPrefixes = 'ExtraInterlanguageLinkPrefixes';

	/**
	 * Name constant for the InterlanguageLinkCodeMap setting, for use with Config::get()
	 * @see MainConfigSchema::InterlanguageLinkCodeMap
	 */
	public const InterlanguageLinkCodeMap = 'InterlanguageLinkCodeMap';

	/**
	 * Name constant for the ExtraLanguageNames setting, for use with Config::get()
	 * @see MainConfigSchema::ExtraLanguageNames
	 */
	public const ExtraLanguageNames = 'ExtraLanguageNames';

	/**
	 * Name constant for the ExtraLanguageCodes setting, for use with Config::get()
	 * @see MainConfigSchema::ExtraLanguageCodes
	 */
	public const ExtraLanguageCodes = 'ExtraLanguageCodes';

	/**
	 * Name constant for the DummyLanguageCodes setting, for use with Config::get()
	 * @see MainConfigSchema::DummyLanguageCodes
	 */
	public const DummyLanguageCodes = 'DummyLanguageCodes';

	/**
	 * Name constant for the AllUnicodeFixes setting, for use with Config::get()
	 * @see MainConfigSchema::AllUnicodeFixes
	 */
	public const AllUnicodeFixes = 'AllUnicodeFixes';

	/**
	 * Name constant for the LegacyEncoding setting, for use with Config::get()
	 * @see MainConfigSchema::LegacyEncoding
	 */
	public const LegacyEncoding = 'LegacyEncoding';

	/**
	 * Name constant for the AmericanDates setting, for use with Config::get()
	 * @see MainConfigSchema::AmericanDates
	 */
	public const AmericanDates = 'AmericanDates';

	/**
	 * Name constant for the TranslateNumerals setting, for use with Config::get()
	 * @see MainConfigSchema::TranslateNumerals
	 */
	public const TranslateNumerals = 'TranslateNumerals';

	/**
	 * Name constant for the UseDatabaseMessages setting, for use with Config::get()
	 * @see MainConfigSchema::UseDatabaseMessages
	 */
	public const UseDatabaseMessages = 'UseDatabaseMessages';

	/**
	 * Name constant for the MaxMsgCacheEntrySize setting, for use with Config::get()
	 * @see MainConfigSchema::MaxMsgCacheEntrySize
	 */
	public const MaxMsgCacheEntrySize = 'MaxMsgCacheEntrySize';

	/**
	 * Name constant for the DisableLangConversion setting, for use with Config::get()
	 * @see MainConfigSchema::DisableLangConversion
	 */
	public const DisableLangConversion = 'DisableLangConversion';

	/**
	 * Name constant for the DisableTitleConversion setting, for use with Config::get()
	 * @see MainConfigSchema::DisableTitleConversion
	 */
	public const DisableTitleConversion = 'DisableTitleConversion';

	/**
	 * Name constant for the DefaultLanguageVariant setting, for use with Config::get()
	 * @see MainConfigSchema::DefaultLanguageVariant
	 */
	public const DefaultLanguageVariant = 'DefaultLanguageVariant';

	/**
	 * Name constant for the UsePigLatinVariant setting, for use with Config::get()
	 * @see MainConfigSchema::UsePigLatinVariant
	 */
	public const UsePigLatinVariant = 'UsePigLatinVariant';

	/**
	 * Name constant for the DisabledVariants setting, for use with Config::get()
	 * @see MainConfigSchema::DisabledVariants
	 */
	public const DisabledVariants = 'DisabledVariants';

	/**
	 * Name constant for the VariantArticlePath setting, for use with Config::get()
	 * @see MainConfigSchema::VariantArticlePath
	 */
	public const VariantArticlePath = 'VariantArticlePath';

	/**
	 * Name constant for the LoginLanguageSelector setting, for use with Config::get()
	 * @see MainConfigSchema::LoginLanguageSelector
	 */
	public const LoginLanguageSelector = 'LoginLanguageSelector';

	/**
	 * Name constant for the ForceUIMsgAsContentMsg setting, for use with Config::get()
	 * @see MainConfigSchema::ForceUIMsgAsContentMsg
	 */
	public const ForceUIMsgAsContentMsg = 'ForceUIMsgAsContentMsg';

	/**
	 * Name constant for the RawHtmlMessages setting, for use with Config::get()
	 * @see MainConfigSchema::RawHtmlMessages
	 */
	public const RawHtmlMessages = 'RawHtmlMessages';

	/**
	 * Name constant for the Localtimezone setting, for use with Config::get()
	 * @see MainConfigSchema::Localtimezone
	 */
	public const Localtimezone = 'Localtimezone';

	/**
	 * Name constant for the LocalTZoffset setting, for use with Config::get()
	 * @see MainConfigSchema::LocalTZoffset
	 */
	public const LocalTZoffset = 'LocalTZoffset';

	/**
	 * Name constant for the OverrideUcfirstCharacters setting, for use with Config::get()
	 * @see MainConfigSchema::OverrideUcfirstCharacters
	 */
	public const OverrideUcfirstCharacters = 'OverrideUcfirstCharacters';

	/**
	 * Name constant for the MimeType setting, for use with Config::get()
	 * @see MainConfigSchema::MimeType
	 */
	public const MimeType = 'MimeType';

	/**
	 * Name constant for the Html5Version setting, for use with Config::get()
	 * @see MainConfigSchema::Html5Version
	 */
	public const Html5Version = 'Html5Version';

	/**
	 * Name constant for the HTMLFormAllowTableFormat setting, for use with Config::get()
	 * @see MainConfigSchema::HTMLFormAllowTableFormat
	 */
	public const HTMLFormAllowTableFormat = 'HTMLFormAllowTableFormat';

	/**
	 * Name constant for the UseMediaWikiUIEverywhere setting, for use with Config::get()
	 * @see MainConfigSchema::UseMediaWikiUIEverywhere
	 */
	public const UseMediaWikiUIEverywhere = 'UseMediaWikiUIEverywhere';

	/**
	 * Name constant for the EditSubmitButtonLabelPublish setting, for use with Config::get()
	 * @see MainConfigSchema::EditSubmitButtonLabelPublish
	 */
	public const EditSubmitButtonLabelPublish = 'EditSubmitButtonLabelPublish';

	/**
	 * Name constant for the XhtmlNamespaces setting, for use with Config::get()
	 * @see MainConfigSchema::XhtmlNamespaces
	 */
	public const XhtmlNamespaces = 'XhtmlNamespaces';

	/**
	 * Name constant for the SiteNotice setting, for use with Config::get()
	 * @see MainConfigSchema::SiteNotice
	 */
	public const SiteNotice = 'SiteNotice';

	/**
	 * Name constant for the BrowserFormatDetection setting, for use with Config::get()
	 * @see MainConfigSchema::BrowserFormatDetection
	 */
	public const BrowserFormatDetection = 'BrowserFormatDetection';

	/**
	 * Name constant for the SkinMetaTags setting, for use with Config::get()
	 * @see MainConfigSchema::SkinMetaTags
	 */
	public const SkinMetaTags = 'SkinMetaTags';

	/**
	 * Name constant for the DefaultSkin setting, for use with Config::get()
	 * @see MainConfigSchema::DefaultSkin
	 */
	public const DefaultSkin = 'DefaultSkin';

	/**
	 * Name constant for the FallbackSkin setting, for use with Config::get()
	 * @see MainConfigSchema::FallbackSkin
	 */
	public const FallbackSkin = 'FallbackSkin';

	/**
	 * Name constant for the SkipSkins setting, for use with Config::get()
	 * @see MainConfigSchema::SkipSkins
	 */
	public const SkipSkins = 'SkipSkins';

	/**
	 * Name constant for the ResourceLoaderClientPreferences setting, for use with Config::get()
	 * @see MainConfigSchema::ResourceLoaderClientPreferences
	 */
	public const ResourceLoaderClientPreferences = 'ResourceLoaderClientPreferences';

	/**
	 * Name constant for the DisableOutputCompression setting, for use with Config::get()
	 * @see MainConfigSchema::DisableOutputCompression
	 */
	public const DisableOutputCompression = 'DisableOutputCompression';

	/**
	 * Name constant for the FragmentMode setting, for use with Config::get()
	 * @see MainConfigSchema::FragmentMode
	 */
	public const FragmentMode = 'FragmentMode';

	/**
	 * Name constant for the ExternalInterwikiFragmentMode setting, for use with Config::get()
	 * @see MainConfigSchema::ExternalInterwikiFragmentMode
	 */
	public const ExternalInterwikiFragmentMode = 'ExternalInterwikiFragmentMode';

	/**
	 * Name constant for the FooterIcons setting, for use with Config::get()
	 * @see MainConfigSchema::FooterIcons
	 */
	public const FooterIcons = 'FooterIcons';

	/**
	 * Name constant for the UseCombinedLoginLink setting, for use with Config::get()
	 * @see MainConfigSchema::UseCombinedLoginLink
	 */
	public const UseCombinedLoginLink = 'UseCombinedLoginLink';

	/**
	 * Name constant for the Edititis setting, for use with Config::get()
	 * @see MainConfigSchema::Edititis
	 */
	public const Edititis = 'Edititis';

	/**
	 * Name constant for the Send404Code setting, for use with Config::get()
	 * @see MainConfigSchema::Send404Code
	 */
	public const Send404Code = 'Send404Code';

	/**
	 * Name constant for the ShowRollbackEditCount setting, for use with Config::get()
	 * @see MainConfigSchema::ShowRollbackEditCount
	 */
	public const ShowRollbackEditCount = 'ShowRollbackEditCount';

	/**
	 * Name constant for the EnableCanonicalServerLink setting, for use with Config::get()
	 * @see MainConfigSchema::EnableCanonicalServerLink
	 */
	public const EnableCanonicalServerLink = 'EnableCanonicalServerLink';

	/**
	 * Name constant for the ResourceModules setting, for use with Config::get()
	 * @see MainConfigSchema::ResourceModules
	 */
	public const ResourceModules = 'ResourceModules';

	/**
	 * Name constant for the ResourceModuleSkinStyles setting, for use with Config::get()
	 * @see MainConfigSchema::ResourceModuleSkinStyles
	 */
	public const ResourceModuleSkinStyles = 'ResourceModuleSkinStyles';

	/**
	 * Name constant for the ResourceLoaderSources setting, for use with Config::get()
	 * @see MainConfigSchema::ResourceLoaderSources
	 */
	public const ResourceLoaderSources = 'ResourceLoaderSources';

	/**
	 * Name constant for the ResourceBasePath setting, for use with Config::get()
	 * @see MainConfigSchema::ResourceBasePath
	 */
	public const ResourceBasePath = 'ResourceBasePath';

	/**
	 * Name constant for the ResourceLoaderMaxage setting, for use with Config::get()
	 * @see MainConfigSchema::ResourceLoaderMaxage
	 */
	public const ResourceLoaderMaxage = 'ResourceLoaderMaxage';

	/**
	 * Name constant for the ResourceLoaderUseObjectCacheForDeps setting, for use with Config::get()
	 * @see MainConfigSchema::ResourceLoaderUseObjectCacheForDeps
	 */
	public const ResourceLoaderUseObjectCacheForDeps = 'ResourceLoaderUseObjectCacheForDeps';

	/**
	 * Name constant for the ResourceLoaderDebug setting, for use with Config::get()
	 * @see MainConfigSchema::ResourceLoaderDebug
	 */
	public const ResourceLoaderDebug = 'ResourceLoaderDebug';

	/**
	 * Name constant for the ResourceLoaderMaxQueryLength setting, for use with Config::get()
	 * @see MainConfigSchema::ResourceLoaderMaxQueryLength
	 */
	public const ResourceLoaderMaxQueryLength = 'ResourceLoaderMaxQueryLength';

	/**
	 * Name constant for the ResourceLoaderValidateJS setting, for use with Config::get()
	 * @see MainConfigSchema::ResourceLoaderValidateJS
	 */
	public const ResourceLoaderValidateJS = 'ResourceLoaderValidateJS';

	/**
	 * Name constant for the ResourceLoaderEnableJSProfiler setting, for use with Config::get()
	 * @see MainConfigSchema::ResourceLoaderEnableJSProfiler
	 */
	public const ResourceLoaderEnableJSProfiler = 'ResourceLoaderEnableJSProfiler';

	/**
	 * Name constant for the ResourceLoaderStorageEnabled setting, for use with Config::get()
	 * @see MainConfigSchema::ResourceLoaderStorageEnabled
	 */
	public const ResourceLoaderStorageEnabled = 'ResourceLoaderStorageEnabled';

	/**
	 * Name constant for the ResourceLoaderStorageVersion setting, for use with Config::get()
	 * @see MainConfigSchema::ResourceLoaderStorageVersion
	 */
	public const ResourceLoaderStorageVersion = 'ResourceLoaderStorageVersion';

	/**
	 * Name constant for the AllowSiteCSSOnRestrictedPages setting, for use with Config::get()
	 * @see MainConfigSchema::AllowSiteCSSOnRestrictedPages
	 */
	public const AllowSiteCSSOnRestrictedPages = 'AllowSiteCSSOnRestrictedPages';

	/**
	 * Name constant for the VueDevelopmentMode setting, for use with Config::get()
	 * @see MainConfigSchema::VueDevelopmentMode
	 */
	public const VueDevelopmentMode = 'VueDevelopmentMode';

	/**
	 * Name constant for the MetaNamespace setting, for use with Config::get()
	 * @see MainConfigSchema::MetaNamespace
	 */
	public const MetaNamespace = 'MetaNamespace';

	/**
	 * Name constant for the MetaNamespaceTalk setting, for use with Config::get()
	 * @see MainConfigSchema::MetaNamespaceTalk
	 */
	public const MetaNamespaceTalk = 'MetaNamespaceTalk';

	/**
	 * Name constant for the CanonicalNamespaceNames setting, for use with Config::get()
	 * @see MainConfigSchema::CanonicalNamespaceNames
	 */
	public const CanonicalNamespaceNames = 'CanonicalNamespaceNames';

	/**
	 * Name constant for the ExtraNamespaces setting, for use with Config::get()
	 * @see MainConfigSchema::ExtraNamespaces
	 */
	public const ExtraNamespaces = 'ExtraNamespaces';

	/**
	 * Name constant for the ExtraGenderNamespaces setting, for use with Config::get()
	 * @see MainConfigSchema::ExtraGenderNamespaces
	 */
	public const ExtraGenderNamespaces = 'ExtraGenderNamespaces';

	/**
	 * Name constant for the NamespaceAliases setting, for use with Config::get()
	 * @see MainConfigSchema::NamespaceAliases
	 */
	public const NamespaceAliases = 'NamespaceAliases';

	/**
	 * Name constant for the LegalTitleChars setting, for use with Config::get()
	 * @see MainConfigSchema::LegalTitleChars
	 */
	public const LegalTitleChars = 'LegalTitleChars';

	/**
	 * Name constant for the CapitalLinks setting, for use with Config::get()
	 * @see MainConfigSchema::CapitalLinks
	 */
	public const CapitalLinks = 'CapitalLinks';

	/**
	 * Name constant for the CapitalLinkOverrides setting, for use with Config::get()
	 * @see MainConfigSchema::CapitalLinkOverrides
	 */
	public const CapitalLinkOverrides = 'CapitalLinkOverrides';

	/**
	 * Name constant for the NamespacesWithSubpages setting, for use with Config::get()
	 * @see MainConfigSchema::NamespacesWithSubpages
	 */
	public const NamespacesWithSubpages = 'NamespacesWithSubpages';

	/**
	 * Name constant for the ContentNamespaces setting, for use with Config::get()
	 * @see MainConfigSchema::ContentNamespaces
	 */
	public const ContentNamespaces = 'ContentNamespaces';

	/**
	 * Name constant for the ShortPagesNamespaceExclusions setting, for use with Config::get()
	 * @see MainConfigSchema::ShortPagesNamespaceExclusions
	 */
	public const ShortPagesNamespaceExclusions = 'ShortPagesNamespaceExclusions';

	/**
	 * Name constant for the ExtraSignatureNamespaces setting, for use with Config::get()
	 * @see MainConfigSchema::ExtraSignatureNamespaces
	 */
	public const ExtraSignatureNamespaces = 'ExtraSignatureNamespaces';

	/**
	 * Name constant for the InvalidRedirectTargets setting, for use with Config::get()
	 * @see MainConfigSchema::InvalidRedirectTargets
	 */
	public const InvalidRedirectTargets = 'InvalidRedirectTargets';

	/**
	 * Name constant for the DisableHardRedirects setting, for use with Config::get()
	 * @see MainConfigSchema::DisableHardRedirects
	 */
	public const DisableHardRedirects = 'DisableHardRedirects';

	/**
	 * Name constant for the FixDoubleRedirects setting, for use with Config::get()
	 * @see MainConfigSchema::FixDoubleRedirects
	 */
	public const FixDoubleRedirects = 'FixDoubleRedirects';

	/**
	 * Name constant for the LocalInterwikis setting, for use with Config::get()
	 * @see MainConfigSchema::LocalInterwikis
	 */
	public const LocalInterwikis = 'LocalInterwikis';

	/**
	 * Name constant for the InterwikiExpiry setting, for use with Config::get()
	 * @see MainConfigSchema::InterwikiExpiry
	 */
	public const InterwikiExpiry = 'InterwikiExpiry';

	/**
	 * Name constant for the InterwikiCache setting, for use with Config::get()
	 * @see MainConfigSchema::InterwikiCache
	 */
	public const InterwikiCache = 'InterwikiCache';

	/**
	 * Name constant for the InterwikiScopes setting, for use with Config::get()
	 * @see MainConfigSchema::InterwikiScopes
	 */
	public const InterwikiScopes = 'InterwikiScopes';

	/**
	 * Name constant for the InterwikiFallbackSite setting, for use with Config::get()
	 * @see MainConfigSchema::InterwikiFallbackSite
	 */
	public const InterwikiFallbackSite = 'InterwikiFallbackSite';

	/**
	 * Name constant for the RedirectSources setting, for use with Config::get()
	 * @see MainConfigSchema::RedirectSources
	 */
	public const RedirectSources = 'RedirectSources';

	/**
	 * Name constant for the SiteTypes setting, for use with Config::get()
	 * @see MainConfigSchema::SiteTypes
	 */
	public const SiteTypes = 'SiteTypes';

	/**
	 * Name constant for the MaxTocLevel setting, for use with Config::get()
	 * @see MainConfigSchema::MaxTocLevel
	 */
	public const MaxTocLevel = 'MaxTocLevel';

	/**
	 * Name constant for the MaxPPNodeCount setting, for use with Config::get()
	 * @see MainConfigSchema::MaxPPNodeCount
	 */
	public const MaxPPNodeCount = 'MaxPPNodeCount';

	/**
	 * Name constant for the MaxTemplateDepth setting, for use with Config::get()
	 * @see MainConfigSchema::MaxTemplateDepth
	 */
	public const MaxTemplateDepth = 'MaxTemplateDepth';

	/**
	 * Name constant for the MaxPPExpandDepth setting, for use with Config::get()
	 * @see MainConfigSchema::MaxPPExpandDepth
	 */
	public const MaxPPExpandDepth = 'MaxPPExpandDepth';

	/**
	 * Name constant for the UrlProtocols setting, for use with Config::get()
	 * @see MainConfigSchema::UrlProtocols
	 */
	public const UrlProtocols = 'UrlProtocols';

	/**
	 * Name constant for the CleanSignatures setting, for use with Config::get()
	 * @see MainConfigSchema::CleanSignatures
	 */
	public const CleanSignatures = 'CleanSignatures';

	/**
	 * Name constant for the AllowExternalImages setting, for use with Config::get()
	 * @see MainConfigSchema::AllowExternalImages
	 */
	public const AllowExternalImages = 'AllowExternalImages';

	/**
	 * Name constant for the AllowExternalImagesFrom setting, for use with Config::get()
	 * @see MainConfigSchema::AllowExternalImagesFrom
	 */
	public const AllowExternalImagesFrom = 'AllowExternalImagesFrom';

	/**
	 * Name constant for the EnableImageWhitelist setting, for use with Config::get()
	 * @see MainConfigSchema::EnableImageWhitelist
	 */
	public const EnableImageWhitelist = 'EnableImageWhitelist';

	/**
	 * Name constant for the AllowImageTag setting, for use with Config::get()
	 * @see MainConfigSchema::AllowImageTag
	 * @deprecated since 1.35; register an extension tag named <img> instead.
	 */
	public const AllowImageTag = 'AllowImageTag';

	/**
	 * Name constant for the TidyConfig setting, for use with Config::get()
	 * @see MainConfigSchema::TidyConfig
	 */
	public const TidyConfig = 'TidyConfig';

	/**
	 * Name constant for the ParsoidSettings setting, for use with Config::get()
	 * @see MainConfigSchema::ParsoidSettings
	 */
	public const ParsoidSettings = 'ParsoidSettings';

	/**
	 * Name constant for the ParserEnableLegacyMediaDOM setting, for use with Config::get()
	 * @see MainConfigSchema::ParserEnableLegacyMediaDOM
	 */
	public const ParserEnableLegacyMediaDOM = 'ParserEnableLegacyMediaDOM';

	/**
	 * Name constant for the UseContentMediaStyles setting, for use with Config::get()
	 * @see MainConfigSchema::UseContentMediaStyles
	 */
	public const UseContentMediaStyles = 'UseContentMediaStyles';

	/**
	 * Name constant for the RawHtml setting, for use with Config::get()
	 * @see MainConfigSchema::RawHtml
	 */
	public const RawHtml = 'RawHtml';

	/**
	 * Name constant for the ExternalLinkTarget setting, for use with Config::get()
	 * @see MainConfigSchema::ExternalLinkTarget
	 */
	public const ExternalLinkTarget = 'ExternalLinkTarget';

	/**
	 * Name constant for the NoFollowLinks setting, for use with Config::get()
	 * @see MainConfigSchema::NoFollowLinks
	 */
	public const NoFollowLinks = 'NoFollowLinks';

	/**
	 * Name constant for the NoFollowNsExceptions setting, for use with Config::get()
	 * @see MainConfigSchema::NoFollowNsExceptions
	 */
	public const NoFollowNsExceptions = 'NoFollowNsExceptions';

	/**
	 * Name constant for the NoFollowDomainExceptions setting, for use with Config::get()
	 * @see MainConfigSchema::NoFollowDomainExceptions
	 */
	public const NoFollowDomainExceptions = 'NoFollowDomainExceptions';

	/**
	 * Name constant for the RegisterInternalExternals setting, for use with Config::get()
	 * @see MainConfigSchema::RegisterInternalExternals
	 */
	public const RegisterInternalExternals = 'RegisterInternalExternals';

	/**
	 * Name constant for the AllowDisplayTitle setting, for use with Config::get()
	 * @see MainConfigSchema::AllowDisplayTitle
	 */
	public const AllowDisplayTitle = 'AllowDisplayTitle';

	/**
	 * Name constant for the RestrictDisplayTitle setting, for use with Config::get()
	 * @see MainConfigSchema::RestrictDisplayTitle
	 */
	public const RestrictDisplayTitle = 'RestrictDisplayTitle';

	/**
	 * Name constant for the ExpensiveParserFunctionLimit setting, for use with Config::get()
	 * @see MainConfigSchema::ExpensiveParserFunctionLimit
	 */
	public const ExpensiveParserFunctionLimit = 'ExpensiveParserFunctionLimit';

	/**
	 * Name constant for the PreprocessorCacheThreshold setting, for use with Config::get()
	 * @see MainConfigSchema::PreprocessorCacheThreshold
	 */
	public const PreprocessorCacheThreshold = 'PreprocessorCacheThreshold';

	/**
	 * Name constant for the EnableScaryTranscluding setting, for use with Config::get()
	 * @see MainConfigSchema::EnableScaryTranscluding
	 */
	public const EnableScaryTranscluding = 'EnableScaryTranscluding';

	/**
	 * Name constant for the TranscludeCacheExpiry setting, for use with Config::get()
	 * @see MainConfigSchema::TranscludeCacheExpiry
	 */
	public const TranscludeCacheExpiry = 'TranscludeCacheExpiry';

	/**
	 * Name constant for the EnableMagicLinks setting, for use with Config::get()
	 * @see MainConfigSchema::EnableMagicLinks
	 */
	public const EnableMagicLinks = 'EnableMagicLinks';

	/**
	 * Name constant for the ArticleCountMethod setting, for use with Config::get()
	 * @see MainConfigSchema::ArticleCountMethod
	 */
	public const ArticleCountMethod = 'ArticleCountMethod';

	/**
	 * Name constant for the ActiveUserDays setting, for use with Config::get()
	 * @see MainConfigSchema::ActiveUserDays
	 */
	public const ActiveUserDays = 'ActiveUserDays';

	/**
	 * Name constant for the LearnerEdits setting, for use with Config::get()
	 * @see MainConfigSchema::LearnerEdits
	 */
	public const LearnerEdits = 'LearnerEdits';

	/**
	 * Name constant for the LearnerMemberSince setting, for use with Config::get()
	 * @see MainConfigSchema::LearnerMemberSince
	 */
	public const LearnerMemberSince = 'LearnerMemberSince';

	/**
	 * Name constant for the ExperiencedUserEdits setting, for use with Config::get()
	 * @see MainConfigSchema::ExperiencedUserEdits
	 */
	public const ExperiencedUserEdits = 'ExperiencedUserEdits';

	/**
	 * Name constant for the ExperiencedUserMemberSince setting, for use with Config::get()
	 * @see MainConfigSchema::ExperiencedUserMemberSince
	 */
	public const ExperiencedUserMemberSince = 'ExperiencedUserMemberSince';

	/**
	 * Name constant for the ManualRevertSearchRadius setting, for use with Config::get()
	 * @see MainConfigSchema::ManualRevertSearchRadius
	 */
	public const ManualRevertSearchRadius = 'ManualRevertSearchRadius';

	/**
	 * Name constant for the RevertedTagMaxDepth setting, for use with Config::get()
	 * @see MainConfigSchema::RevertedTagMaxDepth
	 */
	public const RevertedTagMaxDepth = 'RevertedTagMaxDepth';

	/**
	 * Name constant for the CentralIdLookupProviders setting, for use with Config::get()
	 * @see MainConfigSchema::CentralIdLookupProviders
	 */
	public const CentralIdLookupProviders = 'CentralIdLookupProviders';

	/**
	 * Name constant for the CentralIdLookupProvider setting, for use with Config::get()
	 * @see MainConfigSchema::CentralIdLookupProvider
	 */
	public const CentralIdLookupProvider = 'CentralIdLookupProvider';

	/**
	 * Name constant for the PasswordPolicy setting, for use with Config::get()
	 * @see MainConfigSchema::PasswordPolicy
	 */
	public const PasswordPolicy = 'PasswordPolicy';

	/**
	 * Name constant for the AuthManagerConfig setting, for use with Config::get()
	 * @see MainConfigSchema::AuthManagerConfig
	 */
	public const AuthManagerConfig = 'AuthManagerConfig';

	/**
	 * Name constant for the AuthManagerAutoConfig setting, for use with Config::get()
	 * @see MainConfigSchema::AuthManagerAutoConfig
	 */
	public const AuthManagerAutoConfig = 'AuthManagerAutoConfig';

	/**
	 * Name constant for the RememberMe setting, for use with Config::get()
	 * @see MainConfigSchema::RememberMe
	 */
	public const RememberMe = 'RememberMe';

	/**
	 * Name constant for the ReauthenticateTime setting, for use with Config::get()
	 * @see MainConfigSchema::ReauthenticateTime
	 */
	public const ReauthenticateTime = 'ReauthenticateTime';

	/**
	 * Name constant for the AllowSecuritySensitiveOperationIfCannotReauthenticate setting, for use with Config::get()
	 * @see MainConfigSchema::AllowSecuritySensitiveOperationIfCannotReauthenticate
	 */
	public const AllowSecuritySensitiveOperationIfCannotReauthenticate = 'AllowSecuritySensitiveOperationIfCannotReauthenticate';

	/**
	 * Name constant for the ChangeCredentialsBlacklist setting, for use with Config::get()
	 * @see MainConfigSchema::ChangeCredentialsBlacklist
	 */
	public const ChangeCredentialsBlacklist = 'ChangeCredentialsBlacklist';

	/**
	 * Name constant for the RemoveCredentialsBlacklist setting, for use with Config::get()
	 * @see MainConfigSchema::RemoveCredentialsBlacklist
	 */
	public const RemoveCredentialsBlacklist = 'RemoveCredentialsBlacklist';

	/**
	 * Name constant for the MinimalPasswordLength setting, for use with Config::get()
	 * @see MainConfigSchema::MinimalPasswordLength
	 * @deprecated since 1.26, use $wgPasswordPolicy's MinimalPasswordLength.
	 */
	public const MinimalPasswordLength = 'MinimalPasswordLength';

	/**
	 * Name constant for the MaximalPasswordLength setting, for use with Config::get()
	 * @see MainConfigSchema::MaximalPasswordLength
	 * @deprecated since 1.26, use $wgPasswordPolicy's MaximalPasswordLength.
	 */
	public const MaximalPasswordLength = 'MaximalPasswordLength';

	/**
	 * Name constant for the InvalidPasswordReset setting, for use with Config::get()
	 * @see MainConfigSchema::InvalidPasswordReset
	 */
	public const InvalidPasswordReset = 'InvalidPasswordReset';

	/**
	 * Name constant for the PasswordDefault setting, for use with Config::get()
	 * @see MainConfigSchema::PasswordDefault
	 */
	public const PasswordDefault = 'PasswordDefault';

	/**
	 * Name constant for the PasswordConfig setting, for use with Config::get()
	 * @see MainConfigSchema::PasswordConfig
	 */
	public const PasswordConfig = 'PasswordConfig';

	/**
	 * Name constant for the PasswordResetRoutes setting, for use with Config::get()
	 * @see MainConfigSchema::PasswordResetRoutes
	 */
	public const PasswordResetRoutes = 'PasswordResetRoutes';

	/**
	 * Name constant for the MaxSigChars setting, for use with Config::get()
	 * @see MainConfigSchema::MaxSigChars
	 */
	public const MaxSigChars = 'MaxSigChars';

	/**
	 * Name constant for the SignatureValidation setting, for use with Config::get()
	 * @see MainConfigSchema::SignatureValidation
	 */
	public const SignatureValidation = 'SignatureValidation';

	/**
	 * Name constant for the SignatureAllowedLintErrors setting, for use with Config::get()
	 * @see MainConfigSchema::SignatureAllowedLintErrors
	 */
	public const SignatureAllowedLintErrors = 'SignatureAllowedLintErrors';

	/**
	 * Name constant for the MaxNameChars setting, for use with Config::get()
	 * @see MainConfigSchema::MaxNameChars
	 */
	public const MaxNameChars = 'MaxNameChars';

	/**
	 * Name constant for the ReservedUsernames setting, for use with Config::get()
	 * @see MainConfigSchema::ReservedUsernames
	 */
	public const ReservedUsernames = 'ReservedUsernames';

	/**
	 * Name constant for the DefaultUserOptions setting, for use with Config::get()
	 * @see MainConfigSchema::DefaultUserOptions
	 */
	public const DefaultUserOptions = 'DefaultUserOptions';

	/**
	 * Name constant for the HiddenPrefs setting, for use with Config::get()
	 * @see MainConfigSchema::HiddenPrefs
	 */
	public const HiddenPrefs = 'HiddenPrefs';

	/**
	 * Name constant for the InvalidUsernameCharacters setting, for use with Config::get()
	 * @see MainConfigSchema::InvalidUsernameCharacters
	 */
	public const InvalidUsernameCharacters = 'InvalidUsernameCharacters';

	/**
	 * Name constant for the UserrightsInterwikiDelimiter setting, for use with Config::get()
	 * @see MainConfigSchema::UserrightsInterwikiDelimiter
	 */
	public const UserrightsInterwikiDelimiter = 'UserrightsInterwikiDelimiter';

	/**
	 * Name constant for the SecureLogin setting, for use with Config::get()
	 * @see MainConfigSchema::SecureLogin
	 */
	public const SecureLogin = 'SecureLogin';

	/**
	 * Name constant for the AuthenticationTokenVersion setting, for use with Config::get()
	 * @see MainConfigSchema::AuthenticationTokenVersion
	 */
	public const AuthenticationTokenVersion = 'AuthenticationTokenVersion';

	/**
	 * Name constant for the SessionProviders setting, for use with Config::get()
	 * @see MainConfigSchema::SessionProviders
	 */
	public const SessionProviders = 'SessionProviders';

	/**
	 * Name constant for the AllowRequiringEmailForResets setting, for use with Config::get()
	 * @see MainConfigSchema::AllowRequiringEmailForResets
	 */
	public const AllowRequiringEmailForResets = 'AllowRequiringEmailForResets';

	/**
	 * Name constant for the AutoCreateTempUser setting, for use with Config::get()
	 * @see MainConfigSchema::AutoCreateTempUser
	 */
	public const AutoCreateTempUser = 'AutoCreateTempUser';

	/**
	 * Name constant for the AutoblockExpiry setting, for use with Config::get()
	 * @see MainConfigSchema::AutoblockExpiry
	 */
	public const AutoblockExpiry = 'AutoblockExpiry';

	/**
	 * Name constant for the BlockAllowsUTEdit setting, for use with Config::get()
	 * @see MainConfigSchema::BlockAllowsUTEdit
	 */
	public const BlockAllowsUTEdit = 'BlockAllowsUTEdit';

	/**
	 * Name constant for the BlockCIDRLimit setting, for use with Config::get()
	 * @see MainConfigSchema::BlockCIDRLimit
	 */
	public const BlockCIDRLimit = 'BlockCIDRLimit';

	/**
	 * Name constant for the BlockDisablesLogin setting, for use with Config::get()
	 * @see MainConfigSchema::BlockDisablesLogin
	 */
	public const BlockDisablesLogin = 'BlockDisablesLogin';

	/**
	 * Name constant for the EnablePartialActionBlocks setting, for use with Config::get()
	 * @see MainConfigSchema::EnablePartialActionBlocks
	 */
	public const EnablePartialActionBlocks = 'EnablePartialActionBlocks';

	/**
	 * Name constant for the WhitelistRead setting, for use with Config::get()
	 * @see MainConfigSchema::WhitelistRead
	 */
	public const WhitelistRead = 'WhitelistRead';

	/**
	 * Name constant for the WhitelistReadRegexp setting, for use with Config::get()
	 * @see MainConfigSchema::WhitelistReadRegexp
	 */
	public const WhitelistReadRegexp = 'WhitelistReadRegexp';

	/**
	 * Name constant for the EmailConfirmToEdit setting, for use with Config::get()
	 * @see MainConfigSchema::EmailConfirmToEdit
	 */
	public const EmailConfirmToEdit = 'EmailConfirmToEdit';

	/**
	 * Name constant for the HideIdentifiableRedirects setting, for use with Config::get()
	 * @see MainConfigSchema::HideIdentifiableRedirects
	 */
	public const HideIdentifiableRedirects = 'HideIdentifiableRedirects';

	/**
	 * Name constant for the GroupPermissions setting, for use with Config::get()
	 * @see MainConfigSchema::GroupPermissions
	 */
	public const GroupPermissions = 'GroupPermissions';

	/**
	 * Name constant for the RevokePermissions setting, for use with Config::get()
	 * @see MainConfigSchema::RevokePermissions
	 */
	public const RevokePermissions = 'RevokePermissions';

	/**
	 * Name constant for the GroupInheritsPermissions setting, for use with Config::get()
	 * @see MainConfigSchema::GroupInheritsPermissions
	 */
	public const GroupInheritsPermissions = 'GroupInheritsPermissions';

	/**
	 * Name constant for the ImplicitGroups setting, for use with Config::get()
	 * @see MainConfigSchema::ImplicitGroups
	 */
	public const ImplicitGroups = 'ImplicitGroups';

	/**
	 * Name constant for the GroupsAddToSelf setting, for use with Config::get()
	 * @see MainConfigSchema::GroupsAddToSelf
	 */
	public const GroupsAddToSelf = 'GroupsAddToSelf';

	/**
	 * Name constant for the GroupsRemoveFromSelf setting, for use with Config::get()
	 * @see MainConfigSchema::GroupsRemoveFromSelf
	 */
	public const GroupsRemoveFromSelf = 'GroupsRemoveFromSelf';

	/**
	 * Name constant for the RestrictionTypes setting, for use with Config::get()
	 * @see MainConfigSchema::RestrictionTypes
	 */
	public const RestrictionTypes = 'RestrictionTypes';

	/**
	 * Name constant for the RestrictionLevels setting, for use with Config::get()
	 * @see MainConfigSchema::RestrictionLevels
	 */
	public const RestrictionLevels = 'RestrictionLevels';

	/**
	 * Name constant for the CascadingRestrictionLevels setting, for use with Config::get()
	 * @see MainConfigSchema::CascadingRestrictionLevels
	 */
	public const CascadingRestrictionLevels = 'CascadingRestrictionLevels';

	/**
	 * Name constant for the SemiprotectedRestrictionLevels setting, for use with Config::get()
	 * @see MainConfigSchema::SemiprotectedRestrictionLevels
	 */
	public const SemiprotectedRestrictionLevels = 'SemiprotectedRestrictionLevels';

	/**
	 * Name constant for the NamespaceProtection setting, for use with Config::get()
	 * @see MainConfigSchema::NamespaceProtection
	 */
	public const NamespaceProtection = 'NamespaceProtection';

	/**
	 * Name constant for the NonincludableNamespaces setting, for use with Config::get()
	 * @see MainConfigSchema::NonincludableNamespaces
	 */
	public const NonincludableNamespaces = 'NonincludableNamespaces';

	/**
	 * Name constant for the AutoConfirmAge setting, for use with Config::get()
	 * @see MainConfigSchema::AutoConfirmAge
	 */
	public const AutoConfirmAge = 'AutoConfirmAge';

	/**
	 * Name constant for the AutoConfirmCount setting, for use with Config::get()
	 * @see MainConfigSchema::AutoConfirmCount
	 */
	public const AutoConfirmCount = 'AutoConfirmCount';

	/**
	 * Name constant for the Autopromote setting, for use with Config::get()
	 * @see MainConfigSchema::Autopromote
	 */
	public const Autopromote = 'Autopromote';

	/**
	 * Name constant for the AutopromoteOnce setting, for use with Config::get()
	 * @see MainConfigSchema::AutopromoteOnce
	 */
	public const AutopromoteOnce = 'AutopromoteOnce';

	/**
	 * Name constant for the AutopromoteOnceLogInRC setting, for use with Config::get()
	 * @see MainConfigSchema::AutopromoteOnceLogInRC
	 */
	public const AutopromoteOnceLogInRC = 'AutopromoteOnceLogInRC';

	/**
	 * Name constant for the AddGroups setting, for use with Config::get()
	 * @see MainConfigSchema::AddGroups
	 */
	public const AddGroups = 'AddGroups';

	/**
	 * Name constant for the RemoveGroups setting, for use with Config::get()
	 * @see MainConfigSchema::RemoveGroups
	 */
	public const RemoveGroups = 'RemoveGroups';

	/**
	 * Name constant for the AvailableRights setting, for use with Config::get()
	 * @see MainConfigSchema::AvailableRights
	 */
	public const AvailableRights = 'AvailableRights';

	/**
	 * Name constant for the DeleteRevisionsLimit setting, for use with Config::get()
	 * @see MainConfigSchema::DeleteRevisionsLimit
	 */
	public const DeleteRevisionsLimit = 'DeleteRevisionsLimit';

	/**
	 * Name constant for the DeleteRevisionsBatchSize setting, for use with Config::get()
	 * @see MainConfigSchema::DeleteRevisionsBatchSize
	 */
	public const DeleteRevisionsBatchSize = 'DeleteRevisionsBatchSize';

	/**
	 * Name constant for the HideUserContribLimit setting, for use with Config::get()
	 * @see MainConfigSchema::HideUserContribLimit
	 */
	public const HideUserContribLimit = 'HideUserContribLimit';

	/**
	 * Name constant for the AccountCreationThrottle setting, for use with Config::get()
	 * @see MainConfigSchema::AccountCreationThrottle
	 */
	public const AccountCreationThrottle = 'AccountCreationThrottle';

	/**
	 * Name constant for the SpamRegex setting, for use with Config::get()
	 * @see MainConfigSchema::SpamRegex
	 */
	public const SpamRegex = 'SpamRegex';

	/**
	 * Name constant for the SummarySpamRegex setting, for use with Config::get()
	 * @see MainConfigSchema::SummarySpamRegex
	 */
	public const SummarySpamRegex = 'SummarySpamRegex';

	/**
	 * Name constant for the EnableDnsBlacklist setting, for use with Config::get()
	 * @see MainConfigSchema::EnableDnsBlacklist
	 */
	public const EnableDnsBlacklist = 'EnableDnsBlacklist';

	/**
	 * Name constant for the DnsBlacklistUrls setting, for use with Config::get()
	 * @see MainConfigSchema::DnsBlacklistUrls
	 */
	public const DnsBlacklistUrls = 'DnsBlacklistUrls';

	/**
	 * Name constant for the ProxyList setting, for use with Config::get()
	 * @see MainConfigSchema::ProxyList
	 */
	public const ProxyList = 'ProxyList';

	/**
	 * Name constant for the ProxyWhitelist setting, for use with Config::get()
	 * @see MainConfigSchema::ProxyWhitelist
	 */
	public const ProxyWhitelist = 'ProxyWhitelist';

	/**
	 * Name constant for the SoftBlockRanges setting, for use with Config::get()
	 * @see MainConfigSchema::SoftBlockRanges
	 */
	public const SoftBlockRanges = 'SoftBlockRanges';

	/**
	 * Name constant for the ApplyIpBlocksToXff setting, for use with Config::get()
	 * @see MainConfigSchema::ApplyIpBlocksToXff
	 */
	public const ApplyIpBlocksToXff = 'ApplyIpBlocksToXff';

	/**
	 * Name constant for the RateLimits setting, for use with Config::get()
	 * @see MainConfigSchema::RateLimits
	 */
	public const RateLimits = 'RateLimits';

	/**
	 * Name constant for the RateLimitsExcludedIPs setting, for use with Config::get()
	 * @see MainConfigSchema::RateLimitsExcludedIPs
	 */
	public const RateLimitsExcludedIPs = 'RateLimitsExcludedIPs';

	/**
	 * Name constant for the PutIPinRC setting, for use with Config::get()
	 * @see MainConfigSchema::PutIPinRC
	 */
	public const PutIPinRC = 'PutIPinRC';

	/**
	 * Name constant for the QueryPageDefaultLimit setting, for use with Config::get()
	 * @see MainConfigSchema::QueryPageDefaultLimit
	 */
	public const QueryPageDefaultLimit = 'QueryPageDefaultLimit';

	/**
	 * Name constant for the PasswordAttemptThrottle setting, for use with Config::get()
	 * @see MainConfigSchema::PasswordAttemptThrottle
	 */
	public const PasswordAttemptThrottle = 'PasswordAttemptThrottle';

	/**
	 * Name constant for the GrantPermissions setting, for use with Config::get()
	 * @see MainConfigSchema::GrantPermissions
	 */
	public const GrantPermissions = 'GrantPermissions';

	/**
	 * Name constant for the GrantPermissionGroups setting, for use with Config::get()
	 * @see MainConfigSchema::GrantPermissionGroups
	 */
	public const GrantPermissionGroups = 'GrantPermissionGroups';

	/**
	 * Name constant for the EnableBotPasswords setting, for use with Config::get()
	 * @see MainConfigSchema::EnableBotPasswords
	 */
	public const EnableBotPasswords = 'EnableBotPasswords';

	/**
	 * Name constant for the BotPasswordsCluster setting, for use with Config::get()
	 * @see MainConfigSchema::BotPasswordsCluster
	 */
	public const BotPasswordsCluster = 'BotPasswordsCluster';

	/**
	 * Name constant for the BotPasswordsDatabase setting, for use with Config::get()
	 * @see MainConfigSchema::BotPasswordsDatabase
	 */
	public const BotPasswordsDatabase = 'BotPasswordsDatabase';

	/**
	 * Name constant for the SecretKey setting, for use with Config::get()
	 * @see MainConfigSchema::SecretKey
	 */
	public const SecretKey = 'SecretKey';

	/**
	 * Name constant for the AllowUserJs setting, for use with Config::get()
	 * @see MainConfigSchema::AllowUserJs
	 */
	public const AllowUserJs = 'AllowUserJs';

	/**
	 * Name constant for the AllowUserCss setting, for use with Config::get()
	 * @see MainConfigSchema::AllowUserCss
	 */
	public const AllowUserCss = 'AllowUserCss';

	/**
	 * Name constant for the AllowUserCssPrefs setting, for use with Config::get()
	 * @see MainConfigSchema::AllowUserCssPrefs
	 */
	public const AllowUserCssPrefs = 'AllowUserCssPrefs';

	/**
	 * Name constant for the UseSiteJs setting, for use with Config::get()
	 * @see MainConfigSchema::UseSiteJs
	 */
	public const UseSiteJs = 'UseSiteJs';

	/**
	 * Name constant for the UseSiteCss setting, for use with Config::get()
	 * @see MainConfigSchema::UseSiteCss
	 */
	public const UseSiteCss = 'UseSiteCss';

	/**
	 * Name constant for the BreakFrames setting, for use with Config::get()
	 * @see MainConfigSchema::BreakFrames
	 */
	public const BreakFrames = 'BreakFrames';

	/**
	 * Name constant for the EditPageFrameOptions setting, for use with Config::get()
	 * @see MainConfigSchema::EditPageFrameOptions
	 */
	public const EditPageFrameOptions = 'EditPageFrameOptions';

	/**
	 * Name constant for the ApiFrameOptions setting, for use with Config::get()
	 * @see MainConfigSchema::ApiFrameOptions
	 */
	public const ApiFrameOptions = 'ApiFrameOptions';

	/**
	 * Name constant for the CSPHeader setting, for use with Config::get()
	 * @see MainConfigSchema::CSPHeader
	 */
	public const CSPHeader = 'CSPHeader';

	/**
	 * Name constant for the CSPReportOnlyHeader setting, for use with Config::get()
	 * @see MainConfigSchema::CSPReportOnlyHeader
	 */
	public const CSPReportOnlyHeader = 'CSPReportOnlyHeader';

	/**
	 * Name constant for the CSPFalsePositiveUrls setting, for use with Config::get()
	 * @see MainConfigSchema::CSPFalsePositiveUrls
	 */
	public const CSPFalsePositiveUrls = 'CSPFalsePositiveUrls';

	/**
	 * Name constant for the AllowCrossOrigin setting, for use with Config::get()
	 * @see MainConfigSchema::AllowCrossOrigin
	 */
	public const AllowCrossOrigin = 'AllowCrossOrigin';

	/**
	 * Name constant for the RestAllowCrossOriginCookieAuth setting, for use with Config::get()
	 * @see MainConfigSchema::RestAllowCrossOriginCookieAuth
	 */
	public const RestAllowCrossOriginCookieAuth = 'RestAllowCrossOriginCookieAuth';

	/**
	 * Name constant for the SessionSecret setting, for use with Config::get()
	 * @see MainConfigSchema::SessionSecret
	 */
	public const SessionSecret = 'SessionSecret';

	/**
	 * Name constant for the SessionInsecureSecrets setting, for use with Config::get()
	 * @see MainConfigSchema::SessionInsecureSecrets
	 */
	public const SessionInsecureSecrets = 'SessionInsecureSecrets';

	/**
	 * Name constant for the HKDFSecret setting, for use with Config::get()
	 * @see MainConfigSchema::HKDFSecret
	 */
	public const HKDFSecret = 'HKDFSecret';

	/**
	 * Name constant for the HKDFAlgorithm setting, for use with Config::get()
	 * @see MainConfigSchema::HKDFAlgorithm
	 */
	public const HKDFAlgorithm = 'HKDFAlgorithm';

	/**
	 * Name constant for the CookieExpiration setting, for use with Config::get()
	 * @see MainConfigSchema::CookieExpiration
	 */
	public const CookieExpiration = 'CookieExpiration';

	/**
	 * Name constant for the ExtendedLoginCookieExpiration setting, for use with Config::get()
	 * @see MainConfigSchema::ExtendedLoginCookieExpiration
	 */
	public const ExtendedLoginCookieExpiration = 'ExtendedLoginCookieExpiration';

	/**
	 * Name constant for the CookieDomain setting, for use with Config::get()
	 * @see MainConfigSchema::CookieDomain
	 */
	public const CookieDomain = 'CookieDomain';

	/**
	 * Name constant for the CookiePath setting, for use with Config::get()
	 * @see MainConfigSchema::CookiePath
	 */
	public const CookiePath = 'CookiePath';

	/**
	 * Name constant for the CookieSecure setting, for use with Config::get()
	 * @see MainConfigSchema::CookieSecure
	 */
	public const CookieSecure = 'CookieSecure';

	/**
	 * Name constant for the DisableCookieCheck setting, for use with Config::get()
	 * @see MainConfigSchema::DisableCookieCheck
	 */
	public const DisableCookieCheck = 'DisableCookieCheck';

	/**
	 * Name constant for the CookiePrefix setting, for use with Config::get()
	 * @see MainConfigSchema::CookiePrefix
	 */
	public const CookiePrefix = 'CookiePrefix';

	/**
	 * Name constant for the CookieHttpOnly setting, for use with Config::get()
	 * @see MainConfigSchema::CookieHttpOnly
	 */
	public const CookieHttpOnly = 'CookieHttpOnly';

	/**
	 * Name constant for the CookieSameSite setting, for use with Config::get()
	 * @see MainConfigSchema::CookieSameSite
	 */
	public const CookieSameSite = 'CookieSameSite';

	/**
	 * Name constant for the UseSameSiteLegacyCookies setting, for use with Config::get()
	 * @see MainConfigSchema::UseSameSiteLegacyCookies
	 */
	public const UseSameSiteLegacyCookies = 'UseSameSiteLegacyCookies';

	/**
	 * Name constant for the CacheVaryCookies setting, for use with Config::get()
	 * @see MainConfigSchema::CacheVaryCookies
	 */
	public const CacheVaryCookies = 'CacheVaryCookies';

	/**
	 * Name constant for the SessionName setting, for use with Config::get()
	 * @see MainConfigSchema::SessionName
	 */
	public const SessionName = 'SessionName';

	/**
	 * Name constant for the CookieSetOnAutoblock setting, for use with Config::get()
	 * @see MainConfigSchema::CookieSetOnAutoblock
	 */
	public const CookieSetOnAutoblock = 'CookieSetOnAutoblock';

	/**
	 * Name constant for the CookieSetOnIpBlock setting, for use with Config::get()
	 * @see MainConfigSchema::CookieSetOnIpBlock
	 */
	public const CookieSetOnIpBlock = 'CookieSetOnIpBlock';

	/**
	 * Name constant for the DebugLogFile setting, for use with Config::get()
	 * @see MainConfigSchema::DebugLogFile
	 */
	public const DebugLogFile = 'DebugLogFile';

	/**
	 * Name constant for the DebugLogPrefix setting, for use with Config::get()
	 * @see MainConfigSchema::DebugLogPrefix
	 */
	public const DebugLogPrefix = 'DebugLogPrefix';

	/**
	 * Name constant for the DebugRedirects setting, for use with Config::get()
	 * @see MainConfigSchema::DebugRedirects
	 */
	public const DebugRedirects = 'DebugRedirects';

	/**
	 * Name constant for the DebugRawPage setting, for use with Config::get()
	 * @see MainConfigSchema::DebugRawPage
	 */
	public const DebugRawPage = 'DebugRawPage';

	/**
	 * Name constant for the DebugComments setting, for use with Config::get()
	 * @see MainConfigSchema::DebugComments
	 */
	public const DebugComments = 'DebugComments';

	/**
	 * Name constant for the DebugDumpSql setting, for use with Config::get()
	 * @see MainConfigSchema::DebugDumpSql
	 */
	public const DebugDumpSql = 'DebugDumpSql';

	/**
	 * Name constant for the TrxProfilerLimits setting, for use with Config::get()
	 * @see MainConfigSchema::TrxProfilerLimits
	 */
	public const TrxProfilerLimits = 'TrxProfilerLimits';

	/**
	 * Name constant for the DebugLogGroups setting, for use with Config::get()
	 * @see MainConfigSchema::DebugLogGroups
	 */
	public const DebugLogGroups = 'DebugLogGroups';

	/**
	 * Name constant for the MWLoggerDefaultSpi setting, for use with Config::get()
	 * @see MainConfigSchema::MWLoggerDefaultSpi
	 */
	public const MWLoggerDefaultSpi = 'MWLoggerDefaultSpi';

	/**
	 * Name constant for the ShowDebug setting, for use with Config::get()
	 * @see MainConfigSchema::ShowDebug
	 */
	public const ShowDebug = 'ShowDebug';

	/**
	 * Name constant for the SpecialVersionShowHooks setting, for use with Config::get()
	 * @see MainConfigSchema::SpecialVersionShowHooks
	 */
	public const SpecialVersionShowHooks = 'SpecialVersionShowHooks';

	/**
	 * Name constant for the ShowExceptionDetails setting, for use with Config::get()
	 * @see MainConfigSchema::ShowExceptionDetails
	 */
	public const ShowExceptionDetails = 'ShowExceptionDetails';

	/**
	 * Name constant for the LogExceptionBacktrace setting, for use with Config::get()
	 * @see MainConfigSchema::LogExceptionBacktrace
	 */
	public const LogExceptionBacktrace = 'LogExceptionBacktrace';

	/**
	 * Name constant for the PropagateErrors setting, for use with Config::get()
	 * @see MainConfigSchema::PropagateErrors
	 */
	public const PropagateErrors = 'PropagateErrors';

	/**
	 * Name constant for the ShowHostnames setting, for use with Config::get()
	 * @see MainConfigSchema::ShowHostnames
	 */
	public const ShowHostnames = 'ShowHostnames';

	/**
	 * Name constant for the OverrideHostname setting, for use with Config::get()
	 * @see MainConfigSchema::OverrideHostname
	 */
	public const OverrideHostname = 'OverrideHostname';

	/**
	 * Name constant for the DevelopmentWarnings setting, for use with Config::get()
	 * @see MainConfigSchema::DevelopmentWarnings
	 */
	public const DevelopmentWarnings = 'DevelopmentWarnings';

	/**
	 * Name constant for the DeprecationReleaseLimit setting, for use with Config::get()
	 * @see MainConfigSchema::DeprecationReleaseLimit
	 */
	public const DeprecationReleaseLimit = 'DeprecationReleaseLimit';

	/**
	 * Name constant for the Profiler setting, for use with Config::get()
	 * @see MainConfigSchema::Profiler
	 */
	public const Profiler = 'Profiler';

	/**
	 * Name constant for the StatsdServer setting, for use with Config::get()
	 * @see MainConfigSchema::StatsdServer
	 */
	public const StatsdServer = 'StatsdServer';

	/**
	 * Name constant for the StatsdMetricPrefix setting, for use with Config::get()
	 * @see MainConfigSchema::StatsdMetricPrefix
	 */
	public const StatsdMetricPrefix = 'StatsdMetricPrefix';

	/**
	 * Name constant for the StatsdSamplingRates setting, for use with Config::get()
	 * @see MainConfigSchema::StatsdSamplingRates
	 */
	public const StatsdSamplingRates = 'StatsdSamplingRates';

	/**
	 * Name constant for the StatsTarget setting, for use with Config::get()
	 * @see MainConfigSchema::StatsTarget
	 */
	public const StatsTarget = 'StatsTarget';

	/**
	 * Name constant for the StatsFormat setting, for use with Config::get()
	 * @see MainConfigSchema::StatsFormat
	 */
	public const StatsFormat = 'StatsFormat';

	/**
	 * Name constant for the StatsPrefix setting, for use with Config::get()
	 * @see MainConfigSchema::StatsPrefix
	 */
	public const StatsPrefix = 'StatsPrefix';

	/**
	 * Name constant for the PageInfoTransclusionLimit setting, for use with Config::get()
	 * @see MainConfigSchema::PageInfoTransclusionLimit
	 */
	public const PageInfoTransclusionLimit = 'PageInfoTransclusionLimit';

	/**
	 * Name constant for the EnableJavaScriptTest setting, for use with Config::get()
	 * @see MainConfigSchema::EnableJavaScriptTest
	 */
	public const EnableJavaScriptTest = 'EnableJavaScriptTest';

	/**
	 * Name constant for the CachePrefix setting, for use with Config::get()
	 * @see MainConfigSchema::CachePrefix
	 */
	public const CachePrefix = 'CachePrefix';

	/**
	 * Name constant for the DebugToolbar setting, for use with Config::get()
	 * @see MainConfigSchema::DebugToolbar
	 */
	public const DebugToolbar = 'DebugToolbar';

	/**
	 * Name constant for the DisableTextSearch setting, for use with Config::get()
	 * @see MainConfigSchema::DisableTextSearch
	 */
	public const DisableTextSearch = 'DisableTextSearch';

	/**
	 * Name constant for the AdvancedSearchHighlighting setting, for use with Config::get()
	 * @see MainConfigSchema::AdvancedSearchHighlighting
	 */
	public const AdvancedSearchHighlighting = 'AdvancedSearchHighlighting';

	/**
	 * Name constant for the SearchHighlightBoundaries setting, for use with Config::get()
	 * @see MainConfigSchema::SearchHighlightBoundaries
	 */
	public const SearchHighlightBoundaries = 'SearchHighlightBoundaries';

	/**
	 * Name constant for the OpenSearchTemplate setting, for use with Config::get()
	 * @see MainConfigSchema::OpenSearchTemplate
	 * @deprecated since 1.25 Use $wgOpenSearchTemplates['application/x-suggestions+json']
	 *    instead
	 */
	public const OpenSearchTemplate = 'OpenSearchTemplate';

	/**
	 * Name constant for the OpenSearchTemplates setting, for use with Config::get()
	 * @see MainConfigSchema::OpenSearchTemplates
	 */
	public const OpenSearchTemplates = 'OpenSearchTemplates';

	/**
	 * Name constant for the OpenSearchDefaultLimit setting, for use with Config::get()
	 * @see MainConfigSchema::OpenSearchDefaultLimit
	 */
	public const OpenSearchDefaultLimit = 'OpenSearchDefaultLimit';

	/**
	 * Name constant for the OpenSearchDescriptionLength setting, for use with Config::get()
	 * @see MainConfigSchema::OpenSearchDescriptionLength
	 */
	public const OpenSearchDescriptionLength = 'OpenSearchDescriptionLength';

	/**
	 * Name constant for the SearchSuggestCacheExpiry setting, for use with Config::get()
	 * @see MainConfigSchema::SearchSuggestCacheExpiry
	 */
	public const SearchSuggestCacheExpiry = 'SearchSuggestCacheExpiry';

	/**
	 * Name constant for the DisableSearchUpdate setting, for use with Config::get()
	 * @see MainConfigSchema::DisableSearchUpdate
	 */
	public const DisableSearchUpdate = 'DisableSearchUpdate';

	/**
	 * Name constant for the NamespacesToBeSearchedDefault setting, for use with Config::get()
	 * @see MainConfigSchema::NamespacesToBeSearchedDefault
	 */
	public const NamespacesToBeSearchedDefault = 'NamespacesToBeSearchedDefault';

	/**
	 * Name constant for the DisableInternalSearch setting, for use with Config::get()
	 * @see MainConfigSchema::DisableInternalSearch
	 */
	public const DisableInternalSearch = 'DisableInternalSearch';

	/**
	 * Name constant for the SearchForwardUrl setting, for use with Config::get()
	 * @see MainConfigSchema::SearchForwardUrl
	 */
	public const SearchForwardUrl = 'SearchForwardUrl';

	/**
	 * Name constant for the SitemapNamespaces setting, for use with Config::get()
	 * @see MainConfigSchema::SitemapNamespaces
	 */
	public const SitemapNamespaces = 'SitemapNamespaces';

	/**
	 * Name constant for the SitemapNamespacesPriorities setting, for use with Config::get()
	 * @see MainConfigSchema::SitemapNamespacesPriorities
	 */
	public const SitemapNamespacesPriorities = 'SitemapNamespacesPriorities';

	/**
	 * Name constant for the EnableSearchContributorsByIP setting, for use with Config::get()
	 * @see MainConfigSchema::EnableSearchContributorsByIP
	 */
	public const EnableSearchContributorsByIP = 'EnableSearchContributorsByIP';

	/**
	 * Name constant for the SpecialSearchFormOptions setting, for use with Config::get()
	 * @see MainConfigSchema::SpecialSearchFormOptions
	 */
	public const SpecialSearchFormOptions = 'SpecialSearchFormOptions';

	/**
	 * Name constant for the SearchMatchRedirectPreference setting, for use with Config::get()
	 * @see MainConfigSchema::SearchMatchRedirectPreference
	 */
	public const SearchMatchRedirectPreference = 'SearchMatchRedirectPreference';

	/**
	 * Name constant for the SearchRunSuggestedQuery setting, for use with Config::get()
	 * @see MainConfigSchema::SearchRunSuggestedQuery
	 */
	public const SearchRunSuggestedQuery = 'SearchRunSuggestedQuery';

	/**
	 * Name constant for the Diff3 setting, for use with Config::get()
	 * @see MainConfigSchema::Diff3
	 */
	public const Diff3 = 'Diff3';

	/**
	 * Name constant for the Diff setting, for use with Config::get()
	 * @see MainConfigSchema::Diff
	 */
	public const Diff = 'Diff';

	/**
	 * Name constant for the PreviewOnOpenNamespaces setting, for use with Config::get()
	 * @see MainConfigSchema::PreviewOnOpenNamespaces
	 */
	public const PreviewOnOpenNamespaces = 'PreviewOnOpenNamespaces';

	/**
	 * Name constant for the UniversalEditButton setting, for use with Config::get()
	 * @see MainConfigSchema::UniversalEditButton
	 */
	public const UniversalEditButton = 'UniversalEditButton';

	/**
	 * Name constant for the UseAutomaticEditSummaries setting, for use with Config::get()
	 * @see MainConfigSchema::UseAutomaticEditSummaries
	 */
	public const UseAutomaticEditSummaries = 'UseAutomaticEditSummaries';

	/**
	 * Name constant for the CommandLineDarkBg setting, for use with Config::get()
	 * @see MainConfigSchema::CommandLineDarkBg
	 */
	public const CommandLineDarkBg = 'CommandLineDarkBg';

	/**
	 * Name constant for the ReadOnly setting, for use with Config::get()
	 * @see MainConfigSchema::ReadOnly
	 */
	public const ReadOnly = 'ReadOnly';

	/**
	 * Name constant for the ReadOnlyWatchedItemStore setting, for use with Config::get()
	 * @see MainConfigSchema::ReadOnlyWatchedItemStore
	 */
	public const ReadOnlyWatchedItemStore = 'ReadOnlyWatchedItemStore';

	/**
	 * Name constant for the ReadOnlyFile setting, for use with Config::get()
	 * @see MainConfigSchema::ReadOnlyFile
	 */
	public const ReadOnlyFile = 'ReadOnlyFile';

	/**
	 * Name constant for the UpgradeKey setting, for use with Config::get()
	 * @see MainConfigSchema::UpgradeKey
	 */
	public const UpgradeKey = 'UpgradeKey';

	/**
	 * Name constant for the GitBin setting, for use with Config::get()
	 * @see MainConfigSchema::GitBin
	 */
	public const GitBin = 'GitBin';

	/**
	 * Name constant for the GitRepositoryViewers setting, for use with Config::get()
	 * @see MainConfigSchema::GitRepositoryViewers
	 */
	public const GitRepositoryViewers = 'GitRepositoryViewers';

	/**
	 * Name constant for the RCMaxAge setting, for use with Config::get()
	 * @see MainConfigSchema::RCMaxAge
	 */
	public const RCMaxAge = 'RCMaxAge';

	/**
	 * Name constant for the WatchersMaxAge setting, for use with Config::get()
	 * @see MainConfigSchema::WatchersMaxAge
	 */
	public const WatchersMaxAge = 'WatchersMaxAge';

	/**
	 * Name constant for the UnwatchedPageSecret setting, for use with Config::get()
	 * @see MainConfigSchema::UnwatchedPageSecret
	 */
	public const UnwatchedPageSecret = 'UnwatchedPageSecret';

	/**
	 * Name constant for the RCFilterByAge setting, for use with Config::get()
	 * @see MainConfigSchema::RCFilterByAge
	 */
	public const RCFilterByAge = 'RCFilterByAge';

	/**
	 * Name constant for the RCLinkLimits setting, for use with Config::get()
	 * @see MainConfigSchema::RCLinkLimits
	 */
	public const RCLinkLimits = 'RCLinkLimits';

	/**
	 * Name constant for the RCLinkDays setting, for use with Config::get()
	 * @see MainConfigSchema::RCLinkDays
	 */
	public const RCLinkDays = 'RCLinkDays';

	/**
	 * Name constant for the RCFeeds setting, for use with Config::get()
	 * @see MainConfigSchema::RCFeeds
	 */
	public const RCFeeds = 'RCFeeds';

	/**
	 * Name constant for the RCEngines setting, for use with Config::get()
	 * @see MainConfigSchema::RCEngines
	 */
	public const RCEngines = 'RCEngines';

	/**
	 * Name constant for the RCWatchCategoryMembership setting, for use with Config::get()
	 * @see MainConfigSchema::RCWatchCategoryMembership
	 */
	public const RCWatchCategoryMembership = 'RCWatchCategoryMembership';

	/**
	 * Name constant for the UseRCPatrol setting, for use with Config::get()
	 * @see MainConfigSchema::UseRCPatrol
	 */
	public const UseRCPatrol = 'UseRCPatrol';

	/**
	 * Name constant for the StructuredChangeFiltersLiveUpdatePollingRate setting, for use with Config::get()
	 * @see MainConfigSchema::StructuredChangeFiltersLiveUpdatePollingRate
	 */
	public const StructuredChangeFiltersLiveUpdatePollingRate = 'StructuredChangeFiltersLiveUpdatePollingRate';

	/**
	 * Name constant for the UseNPPatrol setting, for use with Config::get()
	 * @see MainConfigSchema::UseNPPatrol
	 */
	public const UseNPPatrol = 'UseNPPatrol';

	/**
	 * Name constant for the UseFilePatrol setting, for use with Config::get()
	 * @see MainConfigSchema::UseFilePatrol
	 */
	public const UseFilePatrol = 'UseFilePatrol';

	/**
	 * Name constant for the Feed setting, for use with Config::get()
	 * @see MainConfigSchema::Feed
	 */
	public const Feed = 'Feed';

	/**
	 * Name constant for the FeedLimit setting, for use with Config::get()
	 * @see MainConfigSchema::FeedLimit
	 */
	public const FeedLimit = 'FeedLimit';

	/**
	 * Name constant for the FeedCacheTimeout setting, for use with Config::get()
	 * @see MainConfigSchema::FeedCacheTimeout
	 */
	public const FeedCacheTimeout = 'FeedCacheTimeout';

	/**
	 * Name constant for the FeedDiffCutoff setting, for use with Config::get()
	 * @see MainConfigSchema::FeedDiffCutoff
	 */
	public const FeedDiffCutoff = 'FeedDiffCutoff';

	/**
	 * Name constant for the OverrideSiteFeed setting, for use with Config::get()
	 * @see MainConfigSchema::OverrideSiteFeed
	 */
	public const OverrideSiteFeed = 'OverrideSiteFeed';

	/**
	 * Name constant for the FeedClasses setting, for use with Config::get()
	 * @see MainConfigSchema::FeedClasses
	 */
	public const FeedClasses = 'FeedClasses';

	/**
	 * Name constant for the AdvertisedFeedTypes setting, for use with Config::get()
	 * @see MainConfigSchema::AdvertisedFeedTypes
	 */
	public const AdvertisedFeedTypes = 'AdvertisedFeedTypes';

	/**
	 * Name constant for the RCShowWatchingUsers setting, for use with Config::get()
	 * @see MainConfigSchema::RCShowWatchingUsers
	 */
	public const RCShowWatchingUsers = 'RCShowWatchingUsers';

	/**
	 * Name constant for the RCShowChangedSize setting, for use with Config::get()
	 * @see MainConfigSchema::RCShowChangedSize
	 */
	public const RCShowChangedSize = 'RCShowChangedSize';

	/**
	 * Name constant for the RCChangedSizeThreshold setting, for use with Config::get()
	 * @see MainConfigSchema::RCChangedSizeThreshold
	 */
	public const RCChangedSizeThreshold = 'RCChangedSizeThreshold';

	/**
	 * Name constant for the ShowUpdatedMarker setting, for use with Config::get()
	 * @see MainConfigSchema::ShowUpdatedMarker
	 */
	public const ShowUpdatedMarker = 'ShowUpdatedMarker';

	/**
	 * Name constant for the DisableAnonTalk setting, for use with Config::get()
	 * @see MainConfigSchema::DisableAnonTalk
	 */
	public const DisableAnonTalk = 'DisableAnonTalk';

	/**
	 * Name constant for the UseTagFilter setting, for use with Config::get()
	 * @see MainConfigSchema::UseTagFilter
	 */
	public const UseTagFilter = 'UseTagFilter';

	/**
	 * Name constant for the SoftwareTags setting, for use with Config::get()
	 * @see MainConfigSchema::SoftwareTags
	 */
	public const SoftwareTags = 'SoftwareTags';

	/**
	 * Name constant for the UnwatchedPageThreshold setting, for use with Config::get()
	 * @see MainConfigSchema::UnwatchedPageThreshold
	 */
	public const UnwatchedPageThreshold = 'UnwatchedPageThreshold';

	/**
	 * Name constant for the RecentChangesFlags setting, for use with Config::get()
	 * @see MainConfigSchema::RecentChangesFlags
	 */
	public const RecentChangesFlags = 'RecentChangesFlags';

	/**
	 * Name constant for the WatchlistExpiry setting, for use with Config::get()
	 * @see MainConfigSchema::WatchlistExpiry
	 */
	public const WatchlistExpiry = 'WatchlistExpiry';

	/**
	 * Name constant for the WatchlistPurgeRate setting, for use with Config::get()
	 * @see MainConfigSchema::WatchlistPurgeRate
	 */
	public const WatchlistPurgeRate = 'WatchlistPurgeRate';

	/**
	 * Name constant for the WatchlistExpiryMaxDuration setting, for use with Config::get()
	 * @see MainConfigSchema::WatchlistExpiryMaxDuration
	 */
	public const WatchlistExpiryMaxDuration = 'WatchlistExpiryMaxDuration';

	/**
	 * Name constant for the RightsPage setting, for use with Config::get()
	 * @see MainConfigSchema::RightsPage
	 */
	public const RightsPage = 'RightsPage';

	/**
	 * Name constant for the RightsUrl setting, for use with Config::get()
	 * @see MainConfigSchema::RightsUrl
	 */
	public const RightsUrl = 'RightsUrl';

	/**
	 * Name constant for the RightsText setting, for use with Config::get()
	 * @see MainConfigSchema::RightsText
	 */
	public const RightsText = 'RightsText';

	/**
	 * Name constant for the RightsIcon setting, for use with Config::get()
	 * @see MainConfigSchema::RightsIcon
	 */
	public const RightsIcon = 'RightsIcon';

	/**
	 * Name constant for the UseCopyrightUpload setting, for use with Config::get()
	 * @see MainConfigSchema::UseCopyrightUpload
	 */
	public const UseCopyrightUpload = 'UseCopyrightUpload';

	/**
	 * Name constant for the MaxCredits setting, for use with Config::get()
	 * @see MainConfigSchema::MaxCredits
	 */
	public const MaxCredits = 'MaxCredits';

	/**
	 * Name constant for the ShowCreditsIfMax setting, for use with Config::get()
	 * @see MainConfigSchema::ShowCreditsIfMax
	 */
	public const ShowCreditsIfMax = 'ShowCreditsIfMax';

	/**
	 * Name constant for the ImportSources setting, for use with Config::get()
	 * @see MainConfigSchema::ImportSources
	 */
	public const ImportSources = 'ImportSources';

	/**
	 * Name constant for the ImportTargetNamespace setting, for use with Config::get()
	 * @see MainConfigSchema::ImportTargetNamespace
	 */
	public const ImportTargetNamespace = 'ImportTargetNamespace';

	/**
	 * Name constant for the ExportAllowHistory setting, for use with Config::get()
	 * @see MainConfigSchema::ExportAllowHistory
	 */
	public const ExportAllowHistory = 'ExportAllowHistory';

	/**
	 * Name constant for the ExportMaxHistory setting, for use with Config::get()
	 * @see MainConfigSchema::ExportMaxHistory
	 */
	public const ExportMaxHistory = 'ExportMaxHistory';

	/**
	 * Name constant for the ExportAllowListContributors setting, for use with Config::get()
	 * @see MainConfigSchema::ExportAllowListContributors
	 */
	public const ExportAllowListContributors = 'ExportAllowListContributors';

	/**
	 * Name constant for the ExportMaxLinkDepth setting, for use with Config::get()
	 * @see MainConfigSchema::ExportMaxLinkDepth
	 */
	public const ExportMaxLinkDepth = 'ExportMaxLinkDepth';

	/**
	 * Name constant for the ExportFromNamespaces setting, for use with Config::get()
	 * @see MainConfigSchema::ExportFromNamespaces
	 */
	public const ExportFromNamespaces = 'ExportFromNamespaces';

	/**
	 * Name constant for the ExportAllowAll setting, for use with Config::get()
	 * @see MainConfigSchema::ExportAllowAll
	 */
	public const ExportAllowAll = 'ExportAllowAll';

	/**
	 * Name constant for the ExportPagelistLimit setting, for use with Config::get()
	 * @see MainConfigSchema::ExportPagelistLimit
	 */
	public const ExportPagelistLimit = 'ExportPagelistLimit';

	/**
	 * Name constant for the XmlDumpSchemaVersion setting, for use with Config::get()
	 * @see MainConfigSchema::XmlDumpSchemaVersion
	 */
	public const XmlDumpSchemaVersion = 'XmlDumpSchemaVersion';

	/**
	 * Name constant for the WikiFarmSettingsDirectory setting, for use with Config::get()
	 * @see MainConfigSchema::WikiFarmSettingsDirectory
	 */
	public const WikiFarmSettingsDirectory = 'WikiFarmSettingsDirectory';

	/**
	 * Name constant for the WikiFarmSettingsExtension setting, for use with Config::get()
	 * @see MainConfigSchema::WikiFarmSettingsExtension
	 */
	public const WikiFarmSettingsExtension = 'WikiFarmSettingsExtension';

	/**
	 * Name constant for the ExtensionFunctions setting, for use with Config::get()
	 * @see MainConfigSchema::ExtensionFunctions
	 */
	public const ExtensionFunctions = 'ExtensionFunctions';

	/**
	 * Name constant for the ExtensionMessagesFiles setting, for use with Config::get()
	 * @see MainConfigSchema::ExtensionMessagesFiles
	 */
	public const ExtensionMessagesFiles = 'ExtensionMessagesFiles';

	/**
	 * Name constant for the MessagesDirs setting, for use with Config::get()
	 * @see MainConfigSchema::MessagesDirs
	 */
	public const MessagesDirs = 'MessagesDirs';

	/**
	 * Name constant for the ExtensionEntryPointListFiles setting, for use with Config::get()
	 * @see MainConfigSchema::ExtensionEntryPointListFiles
	 */
	public const ExtensionEntryPointListFiles = 'ExtensionEntryPointListFiles';

	/**
	 * Name constant for the ParserOutputHooks setting, for use with Config::get()
	 * @see MainConfigSchema::ParserOutputHooks
	 */
	public const ParserOutputHooks = 'ParserOutputHooks';

	/**
	 * Name constant for the EnableParserLimitReporting setting, for use with Config::get()
	 * @see MainConfigSchema::EnableParserLimitReporting
	 */
	public const EnableParserLimitReporting = 'EnableParserLimitReporting';

	/**
	 * Name constant for the ValidSkinNames setting, for use with Config::get()
	 * @see MainConfigSchema::ValidSkinNames
	 */
	public const ValidSkinNames = 'ValidSkinNames';

	/**
	 * Name constant for the SpecialPages setting, for use with Config::get()
	 * @see MainConfigSchema::SpecialPages
	 */
	public const SpecialPages = 'SpecialPages';

	/**
	 * Name constant for the ExtensionCredits setting, for use with Config::get()
	 * @see MainConfigSchema::ExtensionCredits
	 */
	public const ExtensionCredits = 'ExtensionCredits';

	/**
	 * Name constant for the Hooks setting, for use with Config::get()
	 * @see MainConfigSchema::Hooks
	 */
	public const Hooks = 'Hooks';

	/**
	 * Name constant for the ServiceWiringFiles setting, for use with Config::get()
	 * @see MainConfigSchema::ServiceWiringFiles
	 */
	public const ServiceWiringFiles = 'ServiceWiringFiles';

	/**
	 * Name constant for the JobClasses setting, for use with Config::get()
	 * @see MainConfigSchema::JobClasses
	 */
	public const JobClasses = 'JobClasses';

	/**
	 * Name constant for the JobTypesExcludedFromDefaultQueue setting, for use with Config::get()
	 * @see MainConfigSchema::JobTypesExcludedFromDefaultQueue
	 */
	public const JobTypesExcludedFromDefaultQueue = 'JobTypesExcludedFromDefaultQueue';

	/**
	 * Name constant for the JobBackoffThrottling setting, for use with Config::get()
	 * @see MainConfigSchema::JobBackoffThrottling
	 */
	public const JobBackoffThrottling = 'JobBackoffThrottling';

	/**
	 * Name constant for the JobSerialCommitThreshold setting, for use with Config::get()
	 * @see MainConfigSchema::JobSerialCommitThreshold
	 */
	public const JobSerialCommitThreshold = 'JobSerialCommitThreshold';

	/**
	 * Name constant for the JobTypeConf setting, for use with Config::get()
	 * @see MainConfigSchema::JobTypeConf
	 */
	public const JobTypeConf = 'JobTypeConf';

	/**
	 * Name constant for the JobQueueIncludeInMaxLagFactor setting, for use with Config::get()
	 * @see MainConfigSchema::JobQueueIncludeInMaxLagFactor
	 */
	public const JobQueueIncludeInMaxLagFactor = 'JobQueueIncludeInMaxLagFactor';

	/**
	 * Name constant for the SpecialPageCacheUpdates setting, for use with Config::get()
	 * @see MainConfigSchema::SpecialPageCacheUpdates
	 */
	public const SpecialPageCacheUpdates = 'SpecialPageCacheUpdates';

	/**
	 * Name constant for the PagePropLinkInvalidations setting, for use with Config::get()
	 * @see MainConfigSchema::PagePropLinkInvalidations
	 */
	public const PagePropLinkInvalidations = 'PagePropLinkInvalidations';

	/**
	 * Name constant for the CategoryMagicGallery setting, for use with Config::get()
	 * @see MainConfigSchema::CategoryMagicGallery
	 */
	public const CategoryMagicGallery = 'CategoryMagicGallery';

	/**
	 * Name constant for the CategoryPagingLimit setting, for use with Config::get()
	 * @see MainConfigSchema::CategoryPagingLimit
	 */
	public const CategoryPagingLimit = 'CategoryPagingLimit';

	/**
	 * Name constant for the CategoryCollation setting, for use with Config::get()
	 * @see MainConfigSchema::CategoryCollation
	 */
	public const CategoryCollation = 'CategoryCollation';

	/**
	 * Name constant for the TempCategoryCollations setting, for use with Config::get()
	 * @see MainConfigSchema::TempCategoryCollations
	 */
	public const TempCategoryCollations = 'TempCategoryCollations';

	/**
	 * Name constant for the TrackingCategories setting, for use with Config::get()
	 * @see MainConfigSchema::TrackingCategories
	 * @deprecated since 1.25 Extensions should now register tracking categories using the new
	 *    extension registration system.
	 */
	public const TrackingCategories = 'TrackingCategories';

	/**
	 * Name constant for the LogTypes setting, for use with Config::get()
	 * @see MainConfigSchema::LogTypes
	 */
	public const LogTypes = 'LogTypes';

	/**
	 * Name constant for the LogRestrictions setting, for use with Config::get()
	 * @see MainConfigSchema::LogRestrictions
	 */
	public const LogRestrictions = 'LogRestrictions';

	/**
	 * Name constant for the FilterLogTypes setting, for use with Config::get()
	 * @see MainConfigSchema::FilterLogTypes
	 */
	public const FilterLogTypes = 'FilterLogTypes';

	/**
	 * Name constant for the LogNames setting, for use with Config::get()
	 * @see MainConfigSchema::LogNames
	 */
	public const LogNames = 'LogNames';

	/**
	 * Name constant for the LogHeaders setting, for use with Config::get()
	 * @see MainConfigSchema::LogHeaders
	 */
	public const LogHeaders = 'LogHeaders';

	/**
	 * Name constant for the LogActions setting, for use with Config::get()
	 * @see MainConfigSchema::LogActions
	 */
	public const LogActions = 'LogActions';

	/**
	 * Name constant for the LogActionsHandlers setting, for use with Config::get()
	 * @see MainConfigSchema::LogActionsHandlers
	 */
	public const LogActionsHandlers = 'LogActionsHandlers';

	/**
	 * Name constant for the ActionFilteredLogs setting, for use with Config::get()
	 * @see MainConfigSchema::ActionFilteredLogs
	 */
	public const ActionFilteredLogs = 'ActionFilteredLogs';

	/**
	 * Name constant for the NewUserLog setting, for use with Config::get()
	 * @see MainConfigSchema::NewUserLog
	 */
	public const NewUserLog = 'NewUserLog';

	/**
	 * Name constant for the PageCreationLog setting, for use with Config::get()
	 * @see MainConfigSchema::PageCreationLog
	 */
	public const PageCreationLog = 'PageCreationLog';

	/**
	 * Name constant for the AllowSpecialInclusion setting, for use with Config::get()
	 * @see MainConfigSchema::AllowSpecialInclusion
	 */
	public const AllowSpecialInclusion = 'AllowSpecialInclusion';

	/**
	 * Name constant for the DisableQueryPageUpdate setting, for use with Config::get()
	 * @see MainConfigSchema::DisableQueryPageUpdate
	 */
	public const DisableQueryPageUpdate = 'DisableQueryPageUpdate';

	/**
	 * Name constant for the CountCategorizedImagesAsUsed setting, for use with Config::get()
	 * @see MainConfigSchema::CountCategorizedImagesAsUsed
	 */
	public const CountCategorizedImagesAsUsed = 'CountCategorizedImagesAsUsed';

	/**
	 * Name constant for the MaxRedirectLinksRetrieved setting, for use with Config::get()
	 * @see MainConfigSchema::MaxRedirectLinksRetrieved
	 */
	public const MaxRedirectLinksRetrieved = 'MaxRedirectLinksRetrieved';

	/**
	 * Name constant for the RangeContributionsCIDRLimit setting, for use with Config::get()
	 * @see MainConfigSchema::RangeContributionsCIDRLimit
	 */
	public const RangeContributionsCIDRLimit = 'RangeContributionsCIDRLimit';

	/**
	 * Name constant for the Actions setting, for use with Config::get()
	 * @see MainConfigSchema::Actions
	 */
	public const Actions = 'Actions';

	/**
	 * Name constant for the DefaultRobotPolicy setting, for use with Config::get()
	 * @see MainConfigSchema::DefaultRobotPolicy
	 */
	public const DefaultRobotPolicy = 'DefaultRobotPolicy';

	/**
	 * Name constant for the NamespaceRobotPolicies setting, for use with Config::get()
	 * @see MainConfigSchema::NamespaceRobotPolicies
	 */
	public const NamespaceRobotPolicies = 'NamespaceRobotPolicies';

	/**
	 * Name constant for the ArticleRobotPolicies setting, for use with Config::get()
	 * @see MainConfigSchema::ArticleRobotPolicies
	 */
	public const ArticleRobotPolicies = 'ArticleRobotPolicies';

	/**
	 * Name constant for the ExemptFromUserRobotsControl setting, for use with Config::get()
	 * @see MainConfigSchema::ExemptFromUserRobotsControl
	 */
	public const ExemptFromUserRobotsControl = 'ExemptFromUserRobotsControl';

	/**
	 * Name constant for the DebugAPI setting, for use with Config::get()
	 * @see MainConfigSchema::DebugAPI
	 */
	public const DebugAPI = 'DebugAPI';

	/**
	 * Name constant for the APIModules setting, for use with Config::get()
	 * @see MainConfigSchema::APIModules
	 */
	public const APIModules = 'APIModules';

	/**
	 * Name constant for the APIFormatModules setting, for use with Config::get()
	 * @see MainConfigSchema::APIFormatModules
	 */
	public const APIFormatModules = 'APIFormatModules';

	/**
	 * Name constant for the APIMetaModules setting, for use with Config::get()
	 * @see MainConfigSchema::APIMetaModules
	 */
	public const APIMetaModules = 'APIMetaModules';

	/**
	 * Name constant for the APIPropModules setting, for use with Config::get()
	 * @see MainConfigSchema::APIPropModules
	 */
	public const APIPropModules = 'APIPropModules';

	/**
	 * Name constant for the APIListModules setting, for use with Config::get()
	 * @see MainConfigSchema::APIListModules
	 */
	public const APIListModules = 'APIListModules';

	/**
	 * Name constant for the APIMaxDBRows setting, for use with Config::get()
	 * @see MainConfigSchema::APIMaxDBRows
	 */
	public const APIMaxDBRows = 'APIMaxDBRows';

	/**
	 * Name constant for the APIMaxResultSize setting, for use with Config::get()
	 * @see MainConfigSchema::APIMaxResultSize
	 */
	public const APIMaxResultSize = 'APIMaxResultSize';

	/**
	 * Name constant for the APIMaxUncachedDiffs setting, for use with Config::get()
	 * @see MainConfigSchema::APIMaxUncachedDiffs
	 */
	public const APIMaxUncachedDiffs = 'APIMaxUncachedDiffs';

	/**
	 * Name constant for the APIMaxLagThreshold setting, for use with Config::get()
	 * @see MainConfigSchema::APIMaxLagThreshold
	 */
	public const APIMaxLagThreshold = 'APIMaxLagThreshold';

	/**
	 * Name constant for the APIRequestLog setting, for use with Config::get()
	 * @see MainConfigSchema::APIRequestLog
	 */
	public const APIRequestLog = 'APIRequestLog';

	/**
	 * Name constant for the APICacheHelpTimeout setting, for use with Config::get()
	 * @see MainConfigSchema::APICacheHelpTimeout
	 */
	public const APICacheHelpTimeout = 'APICacheHelpTimeout';

	/**
	 * Name constant for the APIUselessQueryPages setting, for use with Config::get()
	 * @see MainConfigSchema::APIUselessQueryPages
	 */
	public const APIUselessQueryPages = 'APIUselessQueryPages';

	/**
	 * Name constant for the AjaxUploadDestCheck setting, for use with Config::get()
	 * @see MainConfigSchema::AjaxUploadDestCheck
	 */
	public const AjaxUploadDestCheck = 'AjaxUploadDestCheck';

	/**
	 * Name constant for the AjaxLicensePreview setting, for use with Config::get()
	 * @see MainConfigSchema::AjaxLicensePreview
	 */
	public const AjaxLicensePreview = 'AjaxLicensePreview';

	/**
	 * Name constant for the CrossSiteAJAXdomains setting, for use with Config::get()
	 * @see MainConfigSchema::CrossSiteAJAXdomains
	 */
	public const CrossSiteAJAXdomains = 'CrossSiteAJAXdomains';

	/**
	 * Name constant for the CrossSiteAJAXdomainExceptions setting, for use with Config::get()
	 * @see MainConfigSchema::CrossSiteAJAXdomainExceptions
	 */
	public const CrossSiteAJAXdomainExceptions = 'CrossSiteAJAXdomainExceptions';

	/**
	 * Name constant for the AllowedCorsHeaders setting, for use with Config::get()
	 * @see MainConfigSchema::AllowedCorsHeaders
	 */
	public const AllowedCorsHeaders = 'AllowedCorsHeaders';

	/**
	 * Name constant for the RestAPIAdditionalRouteFiles setting, for use with Config::get()
	 * @see MainConfigSchema::RestAPIAdditionalRouteFiles
	 */
	public const RestAPIAdditionalRouteFiles = 'RestAPIAdditionalRouteFiles';

	/**
	 * Name constant for the MaxShellMemory setting, for use with Config::get()
	 * @see MainConfigSchema::MaxShellMemory
	 */
	public const MaxShellMemory = 'MaxShellMemory';

	/**
	 * Name constant for the MaxShellFileSize setting, for use with Config::get()
	 * @see MainConfigSchema::MaxShellFileSize
	 */
	public const MaxShellFileSize = 'MaxShellFileSize';

	/**
	 * Name constant for the MaxShellTime setting, for use with Config::get()
	 * @see MainConfigSchema::MaxShellTime
	 */
	public const MaxShellTime = 'MaxShellTime';

	/**
	 * Name constant for the MaxShellWallClockTime setting, for use with Config::get()
	 * @see MainConfigSchema::MaxShellWallClockTime
	 */
	public const MaxShellWallClockTime = 'MaxShellWallClockTime';

	/**
	 * Name constant for the ShellCgroup setting, for use with Config::get()
	 * @see MainConfigSchema::ShellCgroup
	 */
	public const ShellCgroup = 'ShellCgroup';

	/**
	 * Name constant for the PhpCli setting, for use with Config::get()
	 * @see MainConfigSchema::PhpCli
	 */
	public const PhpCli = 'PhpCli';

	/**
	 * Name constant for the ShellRestrictionMethod setting, for use with Config::get()
	 * @see MainConfigSchema::ShellRestrictionMethod
	 */
	public const ShellRestrictionMethod = 'ShellRestrictionMethod';

	/**
	 * Name constant for the ShellboxUrls setting, for use with Config::get()
	 * @see MainConfigSchema::ShellboxUrls
	 */
	public const ShellboxUrls = 'ShellboxUrls';

	/**
	 * Name constant for the ShellboxSecretKey setting, for use with Config::get()
	 * @see MainConfigSchema::ShellboxSecretKey
	 */
	public const ShellboxSecretKey = 'ShellboxSecretKey';

	/**
	 * Name constant for the HTTPTimeout setting, for use with Config::get()
	 * @see MainConfigSchema::HTTPTimeout
	 */
	public const HTTPTimeout = 'HTTPTimeout';

	/**
	 * Name constant for the HTTPConnectTimeout setting, for use with Config::get()
	 * @see MainConfigSchema::HTTPConnectTimeout
	 */
	public const HTTPConnectTimeout = 'HTTPConnectTimeout';

	/**
	 * Name constant for the HTTPMaxTimeout setting, for use with Config::get()
	 * @see MainConfigSchema::HTTPMaxTimeout
	 */
	public const HTTPMaxTimeout = 'HTTPMaxTimeout';

	/**
	 * Name constant for the HTTPMaxConnectTimeout setting, for use with Config::get()
	 * @see MainConfigSchema::HTTPMaxConnectTimeout
	 */
	public const HTTPMaxConnectTimeout = 'HTTPMaxConnectTimeout';

	/**
	 * Name constant for the HTTPImportTimeout setting, for use with Config::get()
	 * @see MainConfigSchema::HTTPImportTimeout
	 */
	public const HTTPImportTimeout = 'HTTPImportTimeout';

	/**
	 * Name constant for the AsyncHTTPTimeout setting, for use with Config::get()
	 * @see MainConfigSchema::AsyncHTTPTimeout
	 */
	public const AsyncHTTPTimeout = 'AsyncHTTPTimeout';

	/**
	 * Name constant for the HTTPProxy setting, for use with Config::get()
	 * @see MainConfigSchema::HTTPProxy
	 */
	public const HTTPProxy = 'HTTPProxy';

	/**
	 * Name constant for the LocalVirtualHosts setting, for use with Config::get()
	 * @see MainConfigSchema::LocalVirtualHosts
	 */
	public const LocalVirtualHosts = 'LocalVirtualHosts';

	/**
	 * Name constant for the LocalHTTPProxy setting, for use with Config::get()
	 * @see MainConfigSchema::LocalHTTPProxy
	 */
	public const LocalHTTPProxy = 'LocalHTTPProxy';

	/**
	 * Name constant for the AllowExternalReqID setting, for use with Config::get()
	 * @see MainConfigSchema::AllowExternalReqID
	 */
	public const AllowExternalReqID = 'AllowExternalReqID';

	/**
	 * Name constant for the JobRunRate setting, for use with Config::get()
	 * @see MainConfigSchema::JobRunRate
	 */
	public const JobRunRate = 'JobRunRate';

	/**
	 * Name constant for the RunJobsAsync setting, for use with Config::get()
	 * @see MainConfigSchema::RunJobsAsync
	 */
	public const RunJobsAsync = 'RunJobsAsync';

	/**
	 * Name constant for the UpdateRowsPerJob setting, for use with Config::get()
	 * @see MainConfigSchema::UpdateRowsPerJob
	 */
	public const UpdateRowsPerJob = 'UpdateRowsPerJob';

	/**
	 * Name constant for the UpdateRowsPerQuery setting, for use with Config::get()
	 * @see MainConfigSchema::UpdateRowsPerQuery
	 */
	public const UpdateRowsPerQuery = 'UpdateRowsPerQuery';

	/**
	 * Name constant for the RedirectOnLogin setting, for use with Config::get()
	 * @see MainConfigSchema::RedirectOnLogin
	 */
	public const RedirectOnLogin = 'RedirectOnLogin';

	/**
	 * Name constant for the VirtualRestConfig setting, for use with Config::get()
	 * @see MainConfigSchema::VirtualRestConfig
	 */
	public const VirtualRestConfig = 'VirtualRestConfig';

	/**
	 * Name constant for the EventRelayerConfig setting, for use with Config::get()
	 * @see MainConfigSchema::EventRelayerConfig
	 */
	public const EventRelayerConfig = 'EventRelayerConfig';

	/**
	 * Name constant for the Pingback setting, for use with Config::get()
	 * @see MainConfigSchema::Pingback
	 */
	public const Pingback = 'Pingback';

	/**
	 * Name constant for the OriginTrials setting, for use with Config::get()
	 * @see MainConfigSchema::OriginTrials
	 */
	public const OriginTrials = 'OriginTrials';

	/**
	 * Name constant for the ReportToExpiry setting, for use with Config::get()
	 * @see MainConfigSchema::ReportToExpiry
	 */
	public const ReportToExpiry = 'ReportToExpiry';

	/**
	 * Name constant for the ReportToEndpoints setting, for use with Config::get()
	 * @see MainConfigSchema::ReportToEndpoints
	 */
	public const ReportToEndpoints = 'ReportToEndpoints';

	/**
	 * Name constant for the FeaturePolicyReportOnly setting, for use with Config::get()
	 * @see MainConfigSchema::FeaturePolicyReportOnly
	 */
	public const FeaturePolicyReportOnly = 'FeaturePolicyReportOnly';

	/**
	 * Name constant for the SkinsPreferred setting, for use with Config::get()
	 * @see MainConfigSchema::SkinsPreferred
	 */
	public const SkinsPreferred = 'SkinsPreferred';

	/**
	 * Name constant for the SpecialContributeSkinsEnabled setting, for use with Config::get()
	 * @see MainConfigSchema::SpecialContributeSkinsEnabled
	 */
	public const SpecialContributeSkinsEnabled = 'SpecialContributeSkinsEnabled';

}
